'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DBxDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DBxDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableTransactionData As TransactionDataDataTable
    
    Private tableMAPPKGDCData As MAPPKGDCDataDataTable
    
    Private tableMAPPKGMTData As MAPPKGMTDataDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("TransactionData")) Is Nothing) Then
                MyBase.Tables.Add(New TransactionDataDataTable(ds.Tables("TransactionData")))
            End If
            If (Not (ds.Tables("MAPPKGDCData")) Is Nothing) Then
                MyBase.Tables.Add(New MAPPKGDCDataDataTable(ds.Tables("MAPPKGDCData")))
            End If
            If (Not (ds.Tables("MAPPKGMTData")) Is Nothing) Then
                MyBase.Tables.Add(New MAPPKGMTDataDataTable(ds.Tables("MAPPKGMTData")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TransactionData() As TransactionDataDataTable
        Get
            Return Me.tableTransactionData
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MAPPKGDCData() As MAPPKGDCDataDataTable
        Get
            Return Me.tableMAPPKGDCData
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MAPPKGMTData() As MAPPKGMTDataDataTable
        Get
            Return Me.tableMAPPKGMTData
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DBxDataSet = CType(MyBase.Clone,DBxDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("TransactionData")) Is Nothing) Then
                MyBase.Tables.Add(New TransactionDataDataTable(ds.Tables("TransactionData")))
            End If
            If (Not (ds.Tables("MAPPKGDCData")) Is Nothing) Then
                MyBase.Tables.Add(New MAPPKGDCDataDataTable(ds.Tables("MAPPKGDCData")))
            End If
            If (Not (ds.Tables("MAPPKGMTData")) Is Nothing) Then
                MyBase.Tables.Add(New MAPPKGMTDataDataTable(ds.Tables("MAPPKGMTData")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableTransactionData = CType(MyBase.Tables("TransactionData"),TransactionDataDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTransactionData) Is Nothing) Then
                Me.tableTransactionData.InitVars
            End If
        End If
        Me.tableMAPPKGDCData = CType(MyBase.Tables("MAPPKGDCData"),MAPPKGDCDataDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMAPPKGDCData) Is Nothing) Then
                Me.tableMAPPKGDCData.InitVars
            End If
        End If
        Me.tableMAPPKGMTData = CType(MyBase.Tables("MAPPKGMTData"),MAPPKGMTDataDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMAPPKGMTData) Is Nothing) Then
                Me.tableMAPPKGMTData.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "DBxDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DBxDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableTransactionData = New TransactionDataDataTable()
        MyBase.Tables.Add(Me.tableTransactionData)
        Me.tableMAPPKGDCData = New MAPPKGDCDataDataTable()
        MyBase.Tables.Add(Me.tableMAPPKGDCData)
        Me.tableMAPPKGMTData = New MAPPKGMTDataDataTable()
        MyBase.Tables.Add(Me.tableMAPPKGMTData)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeTransactionData() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeMAPPKGDCData() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeMAPPKGMTData() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DBxDataSet = New DBxDataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub TransactionDataRowChangeEventHandler(ByVal sender As Object, ByVal e As TransactionDataRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub MAPPKGDCDataRowChangeEventHandler(ByVal sender As Object, ByVal e As MAPPKGDCDataRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub MAPPKGMTDataRowChangeEventHandler(ByVal sender As Object, ByVal e As MAPPKGMTDataRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TransactionDataDataTable
        Inherits Global.System.Data.TypedTableBase(Of TransactionDataRow)
        
        Private columnLotNo As Global.System.Data.DataColumn
        
        Private columnPackage As Global.System.Data.DataColumn
        
        Private columnDevice As Global.System.Data.DataColumn
        
        Private columnMarkTextLine1 As Global.System.Data.DataColumn
        
        Private columnMarkTextLine2 As Global.System.Data.DataColumn
        
        Private columnMarkTextLine3 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TransactionData"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LotNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PackageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPackage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DeviceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDevice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MarkTextLine1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarkTextLine1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MarkTextLine2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarkTextLine2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MarkTextLine3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarkTextLine3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TransactionDataRow
            Get
                Return CType(Me.Rows(index),TransactionDataRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TransactionDataRowChanging As TransactionDataRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TransactionDataRowChanged As TransactionDataRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TransactionDataRowDeleting As TransactionDataRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TransactionDataRowDeleted As TransactionDataRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddTransactionDataRow(ByVal row As TransactionDataRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddTransactionDataRow(ByVal LotNo As String, ByVal Package As String, ByVal Device As String, ByVal MarkTextLine1 As String, ByVal MarkTextLine2 As String, ByVal MarkTextLine3 As String) As TransactionDataRow
            Dim rowTransactionDataRow As TransactionDataRow = CType(Me.NewRow,TransactionDataRow)
            Dim columnValuesArray() As Object = New Object() {LotNo, Package, Device, MarkTextLine1, MarkTextLine2, MarkTextLine3}
            rowTransactionDataRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTransactionDataRow)
            Return rowTransactionDataRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByLotNo(ByVal LotNo As String) As TransactionDataRow
            Return CType(Me.Rows.Find(New Object() {LotNo}),TransactionDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TransactionDataDataTable = CType(MyBase.Clone,TransactionDataDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TransactionDataDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnLotNo = MyBase.Columns("LotNo")
            Me.columnPackage = MyBase.Columns("Package")
            Me.columnDevice = MyBase.Columns("Device")
            Me.columnMarkTextLine1 = MyBase.Columns("MarkTextLine1")
            Me.columnMarkTextLine2 = MyBase.Columns("MarkTextLine2")
            Me.columnMarkTextLine3 = MyBase.Columns("MarkTextLine3")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnLotNo = New Global.System.Data.DataColumn("LotNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotNo)
            Me.columnPackage = New Global.System.Data.DataColumn("Package", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPackage)
            Me.columnDevice = New Global.System.Data.DataColumn("Device", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDevice)
            Me.columnMarkTextLine1 = New Global.System.Data.DataColumn("MarkTextLine1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarkTextLine1)
            Me.columnMarkTextLine2 = New Global.System.Data.DataColumn("MarkTextLine2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarkTextLine2)
            Me.columnMarkTextLine3 = New Global.System.Data.DataColumn("MarkTextLine3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarkTextLine3)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnLotNo}, true))
            Me.columnLotNo.AllowDBNull = false
            Me.columnLotNo.Unique = true
            Me.columnLotNo.MaxLength = 10
            Me.columnPackage.MaxLength = 10
            Me.columnDevice.MaxLength = 20
            Me.columnMarkTextLine1.MaxLength = 10
            Me.columnMarkTextLine2.MaxLength = 10
            Me.columnMarkTextLine3.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewTransactionDataRow() As TransactionDataRow
            Return CType(Me.NewRow,TransactionDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TransactionDataRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TransactionDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TransactionDataRowChangedEvent) Is Nothing) Then
                RaiseEvent TransactionDataRowChanged(Me, New TransactionDataRowChangeEvent(CType(e.Row,TransactionDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TransactionDataRowChangingEvent) Is Nothing) Then
                RaiseEvent TransactionDataRowChanging(Me, New TransactionDataRowChangeEvent(CType(e.Row,TransactionDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TransactionDataRowDeletedEvent) Is Nothing) Then
                RaiseEvent TransactionDataRowDeleted(Me, New TransactionDataRowChangeEvent(CType(e.Row,TransactionDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TransactionDataRowDeletingEvent) Is Nothing) Then
                RaiseEvent TransactionDataRowDeleting(Me, New TransactionDataRowChangeEvent(CType(e.Row,TransactionDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveTransactionDataRow(ByVal row As TransactionDataRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DBxDataSet = New DBxDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TransactionDataDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MAPPKGDCDataDataTable
        Inherits Global.System.Data.TypedTableBase(Of MAPPKGDCDataRow)
        
        Private columnMCNo As Global.System.Data.DataColumn
        
        Private columnLotNo As Global.System.Data.DataColumn
        
        Private columnLotStartTime As Global.System.Data.DataColumn
        
        Private columnLotEndTime As Global.System.Data.DataColumn
        
        Private columnOPNo As Global.System.Data.DataColumn
        
        Private columnInputQty As Global.System.Data.DataColumn
        
        Private columnTotalGood As Global.System.Data.DataColumn
        
        Private columnTotalNG As Global.System.Data.DataColumn
        
        Private columnCutSpeed As Global.System.Data.DataColumn
        
        Private columnTableCheck As Global.System.Data.DataColumn
        
        Private columnZ1KerfWidthBe As Global.System.Data.DataColumn
        
        Private columnZ1KerfWidthAct As Global.System.Data.DataColumn
        
        Private columnZ1KerfWidthAf As Global.System.Data.DataColumn
        
        Private columnZ1CuttingPosBe As Global.System.Data.DataColumn
        
        Private columnZ1CuttingPosAct As Global.System.Data.DataColumn
        
        Private columnZ1CuttingPosAf As Global.System.Data.DataColumn
        
        Private columnZ1ChippingBe As Global.System.Data.DataColumn
        
        Private columnZ1ChippingAct As Global.System.Data.DataColumn
        
        Private columnZ1ChippingAf As Global.System.Data.DataColumn
        
        Private columnZ2KerfWidthBe As Global.System.Data.DataColumn
        
        Private columnZ2KerfWidthAct As Global.System.Data.DataColumn
        
        Private columnZ2KerfWidthAf As Global.System.Data.DataColumn
        
        Private columnZ2CuttingPosBe As Global.System.Data.DataColumn
        
        Private columnZ2CuttingPosAct As Global.System.Data.DataColumn
        
        Private columnZ2CuttingPosAf As Global.System.Data.DataColumn
        
        Private columnZ2ChippingBe As Global.System.Data.DataColumn
        
        Private columnZ2ChippingAct As Global.System.Data.DataColumn
        
        Private columnZ2ChippingAf As Global.System.Data.DataColumn
        
        Private columnPKGBurrBe As Global.System.Data.DataColumn
        
        Private columnPKGBurrAf As Global.System.Data.DataColumn
        
        Private columnMeltPlateBe As Global.System.Data.DataColumn
        
        Private columnMeltPlateAf As Global.System.Data.DataColumn
        
        Private columnCrackChippingBe As Global.System.Data.DataColumn
        
        Private columnCrackChippingAf As Global.System.Data.DataColumn
        
        Private columnCutDepthBe As Global.System.Data.DataColumn
        
        Private columnCutDepthAf As Global.System.Data.DataColumn
        
        Private columnZ1BladeAmonthWear As Global.System.Data.DataColumn
        
        Private columnZ2BladeAmonthWear As Global.System.Data.DataColumn
        
        Private columnZ1BladeChange As Global.System.Data.DataColumn
        
        Private columnZ2BladeChange As Global.System.Data.DataColumn
        
        Private columnZ1BladeCarlibation As Global.System.Data.DataColumn
        
        Private columnZ2BladeCarlibation As Global.System.Data.DataColumn
        
        Private columnAlmNotFoundMacroTargQty As Global.System.Data.DataColumn
        
        Private columnAlmNotFoundMicroTargQty As Global.System.Data.DataColumn
        
        Private columnAlmLeastSqareApproxQty As Global.System.Data.DataColumn
        
        Private columnAlmNonContSetupCheckQty As Global.System.Data.DataColumn
        
        Private columnAlmNonContSetupReppErrQty As Global.System.Data.DataColumn
        
        Private columnAlmBladeWearErrQty As Global.System.Data.DataColumn
        
        Private columnAlmBladeExposLimitQty As Global.System.Data.DataColumn
        
        Private columnAlmCutWaferFlowLowLimitQty As Global.System.Data.DataColumn
        
        Private columnAndon As Global.System.Data.DataColumn
        
        Private columnOPJudgement As Global.System.Data.DataColumn
        
        Private columnLotJudgement As Global.System.Data.DataColumn
        
        Private columnSelfConVersion As Global.System.Data.DataColumn
        
        Private columnNetVersion As Global.System.Data.DataColumn
        
        Private columnGLCheck As Global.System.Data.DataColumn
        
        Private columnRemark As Global.System.Data.DataColumn
        
        Private columnZ1BladeType As Global.System.Data.DataColumn
        
        Private columnZ2BladeType As Global.System.Data.DataColumn
        
        Private columnZ1BladeLotNo As Global.System.Data.DataColumn
        
        Private columnZ2BladeLotNo As Global.System.Data.DataColumn
        
        Private columnLeadZingScratchBe As Global.System.Data.DataColumn
        
        Private columnLeadZingScratchAf As Global.System.Data.DataColumn
        
        Private columnMakerQty As Global.System.Data.DataColumn
        
        Private columnICOffQty As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MAPPKGDCData"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MCNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMCNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LotNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LotStartTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotStartTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LotEndTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotEndTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OPNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property InputQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInputQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TotalGoodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalGood
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TotalNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CutSpeedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCutSpeed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TableCheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTableCheck
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Z1KerfWidthBeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZ1KerfWidthBe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Z1KerfWidthActColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZ1KerfWidthAct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Z1KerfWidthAfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZ1KerfWidthAf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Z1CuttingPosBeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZ1CuttingPosBe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Z1CuttingPosActColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZ1CuttingPosAct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Z1CuttingPosAfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZ1CuttingPosAf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Z1ChippingBeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZ1ChippingBe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Z1ChippingActColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZ1ChippingAct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Z1ChippingAfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZ1ChippingAf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Z2KerfWidthBeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZ2KerfWidthBe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Z2KerfWidthActColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZ2KerfWidthAct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Z2KerfWidthAfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZ2KerfWidthAf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Z2CuttingPosBeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZ2CuttingPosBe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Z2CuttingPosActColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZ2CuttingPosAct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Z2CuttingPosAfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZ2CuttingPosAf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Z2ChippingBeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZ2ChippingBe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Z2ChippingActColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZ2ChippingAct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Z2ChippingAfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZ2ChippingAf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PKGBurrBeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPKGBurrBe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PKGBurrAfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPKGBurrAf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MeltPlateBeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMeltPlateBe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MeltPlateAfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMeltPlateAf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CrackChippingBeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCrackChippingBe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CrackChippingAfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCrackChippingAf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CutDepthBeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCutDepthBe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CutDepthAfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCutDepthAf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Z1BladeAmonthWearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZ1BladeAmonthWear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Z2BladeAmonthWearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZ2BladeAmonthWear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Z1BladeChangeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZ1BladeChange
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Z2BladeChangeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZ2BladeChange
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Z1BladeCarlibationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZ1BladeCarlibation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Z2BladeCarlibationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZ2BladeCarlibation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AlmNotFoundMacroTargQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAlmNotFoundMacroTargQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AlmNotFoundMicroTargQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAlmNotFoundMicroTargQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AlmLeastSqareApproxQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAlmLeastSqareApproxQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AlmNonContSetupCheckQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAlmNonContSetupCheckQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AlmNonContSetupReppErrQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAlmNonContSetupReppErrQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AlmBladeWearErrQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAlmBladeWearErrQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AlmBladeExposLimitQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAlmBladeExposLimitQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AlmCutWaferFlowLowLimitQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAlmCutWaferFlowLowLimitQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AndonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAndon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OPJudgementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPJudgement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LotJudgementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotJudgement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SelfConVersionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSelfConVersion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NetVersionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNetVersion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GLCheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGLCheck
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RemarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Z1BladeTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZ1BladeType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Z2BladeTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZ2BladeType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Z1BladeLotNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZ1BladeLotNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Z2BladeLotNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZ2BladeLotNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LeadZingScratchBeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeadZingScratchBe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LeadZingScratchAfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeadZingScratchAf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MakerQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMakerQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ICOffQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICOffQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MAPPKGDCDataRow
            Get
                Return CType(Me.Rows(index),MAPPKGDCDataRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAPPKGDCDataRowChanging As MAPPKGDCDataRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAPPKGDCDataRowChanged As MAPPKGDCDataRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAPPKGDCDataRowDeleting As MAPPKGDCDataRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAPPKGDCDataRowDeleted As MAPPKGDCDataRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddMAPPKGDCDataRow(ByVal row As MAPPKGDCDataRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddMAPPKGDCDataRow( _
                    ByVal MCNo As String,  _
                    ByVal LotNo As String,  _
                    ByVal LotStartTime As Date,  _
                    ByVal LotEndTime As Date,  _
                    ByVal OPNo As String,  _
                    ByVal InputQty As Integer,  _
                    ByVal TotalGood As Integer,  _
                    ByVal TotalNG As Integer,  _
                    ByVal CutSpeed As String,  _
                    ByVal TableCheck As String,  _
                    ByVal Z1KerfWidthBe As String,  _
                    ByVal Z1KerfWidthAct As Short,  _
                    ByVal Z1KerfWidthAf As String,  _
                    ByVal Z1CuttingPosBe As String,  _
                    ByVal Z1CuttingPosAct As Short,  _
                    ByVal Z1CuttingPosAf As String,  _
                    ByVal Z1ChippingBe As String,  _
                    ByVal Z1ChippingAct As Short,  _
                    ByVal Z1ChippingAf As String,  _
                    ByVal Z2KerfWidthBe As String,  _
                    ByVal Z2KerfWidthAct As Short,  _
                    ByVal Z2KerfWidthAf As String,  _
                    ByVal Z2CuttingPosBe As String,  _
                    ByVal Z2CuttingPosAct As Short,  _
                    ByVal Z2CuttingPosAf As String,  _
                    ByVal Z2ChippingBe As String,  _
                    ByVal Z2ChippingAct As Short,  _
                    ByVal Z2ChippingAf As String,  _
                    ByVal PKGBurrBe As String,  _
                    ByVal PKGBurrAf As String,  _
                    ByVal MeltPlateBe As String,  _
                    ByVal MeltPlateAf As String,  _
                    ByVal CrackChippingBe As String,  _
                    ByVal CrackChippingAf As String,  _
                    ByVal CutDepthBe As String,  _
                    ByVal CutDepthAf As String,  _
                    ByVal Z1BladeAmonthWear As Short,  _
                    ByVal Z2BladeAmonthWear As Short,  _
                    ByVal Z1BladeChange As String,  _
                    ByVal Z2BladeChange As String,  _
                    ByVal Z1BladeCarlibation As String,  _
                    ByVal Z2BladeCarlibation As String,  _
                    ByVal AlmNotFoundMacroTargQty As Short,  _
                    ByVal AlmNotFoundMicroTargQty As Short,  _
                    ByVal AlmLeastSqareApproxQty As Short,  _
                    ByVal AlmNonContSetupCheckQty As Short,  _
                    ByVal AlmNonContSetupReppErrQty As Short,  _
                    ByVal AlmBladeWearErrQty As Short,  _
                    ByVal AlmBladeExposLimitQty As Short,  _
                    ByVal AlmCutWaferFlowLowLimitQty As Short,  _
                    ByVal Andon As String,  _
                    ByVal OPJudgement As String,  _
                    ByVal LotJudgement As String,  _
                    ByVal SelfConVersion As String,  _
                    ByVal NetVersion As String,  _
                    ByVal GLCheck As String,  _
                    ByVal Remark As String,  _
                    ByVal Z1BladeType As String,  _
                    ByVal Z2BladeType As String,  _
                    ByVal Z1BladeLotNo As String,  _
                    ByVal Z2BladeLotNo As String,  _
                    ByVal LeadZingScratchBe As String,  _
                    ByVal LeadZingScratchAf As String,  _
                    ByVal MakerQty As Integer,  _
                    ByVal ICOffQty As Integer) As MAPPKGDCDataRow
            Dim rowMAPPKGDCDataRow As MAPPKGDCDataRow = CType(Me.NewRow,MAPPKGDCDataRow)
            Dim columnValuesArray() As Object = New Object() {MCNo, LotNo, LotStartTime, LotEndTime, OPNo, InputQty, TotalGood, TotalNG, CutSpeed, TableCheck, Z1KerfWidthBe, Z1KerfWidthAct, Z1KerfWidthAf, Z1CuttingPosBe, Z1CuttingPosAct, Z1CuttingPosAf, Z1ChippingBe, Z1ChippingAct, Z1ChippingAf, Z2KerfWidthBe, Z2KerfWidthAct, Z2KerfWidthAf, Z2CuttingPosBe, Z2CuttingPosAct, Z2CuttingPosAf, Z2ChippingBe, Z2ChippingAct, Z2ChippingAf, PKGBurrBe, PKGBurrAf, MeltPlateBe, MeltPlateAf, CrackChippingBe, CrackChippingAf, CutDepthBe, CutDepthAf, Z1BladeAmonthWear, Z2BladeAmonthWear, Z1BladeChange, Z2BladeChange, Z1BladeCarlibation, Z2BladeCarlibation, AlmNotFoundMacroTargQty, AlmNotFoundMicroTargQty, AlmLeastSqareApproxQty, AlmNonContSetupCheckQty, AlmNonContSetupReppErrQty, AlmBladeWearErrQty, AlmBladeExposLimitQty, AlmCutWaferFlowLowLimitQty, Andon, OPJudgement, LotJudgement, SelfConVersion, NetVersion, GLCheck, Remark, Z1BladeType, Z2BladeType, Z1BladeLotNo, Z2BladeLotNo, LeadZingScratchBe, LeadZingScratchAf, MakerQty, ICOffQty}
            rowMAPPKGDCDataRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMAPPKGDCDataRow)
            Return rowMAPPKGDCDataRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByMCNoLotNoLotStartTime(ByVal MCNo As String, ByVal LotNo As String, ByVal LotStartTime As Date) As MAPPKGDCDataRow
            Return CType(Me.Rows.Find(New Object() {MCNo, LotNo, LotStartTime}),MAPPKGDCDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MAPPKGDCDataDataTable = CType(MyBase.Clone,MAPPKGDCDataDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MAPPKGDCDataDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnMCNo = MyBase.Columns("MCNo")
            Me.columnLotNo = MyBase.Columns("LotNo")
            Me.columnLotStartTime = MyBase.Columns("LotStartTime")
            Me.columnLotEndTime = MyBase.Columns("LotEndTime")
            Me.columnOPNo = MyBase.Columns("OPNo")
            Me.columnInputQty = MyBase.Columns("InputQty")
            Me.columnTotalGood = MyBase.Columns("TotalGood")
            Me.columnTotalNG = MyBase.Columns("TotalNG")
            Me.columnCutSpeed = MyBase.Columns("CutSpeed")
            Me.columnTableCheck = MyBase.Columns("TableCheck")
            Me.columnZ1KerfWidthBe = MyBase.Columns("Z1KerfWidthBe")
            Me.columnZ1KerfWidthAct = MyBase.Columns("Z1KerfWidthAct")
            Me.columnZ1KerfWidthAf = MyBase.Columns("Z1KerfWidthAf")
            Me.columnZ1CuttingPosBe = MyBase.Columns("Z1CuttingPosBe")
            Me.columnZ1CuttingPosAct = MyBase.Columns("Z1CuttingPosAct")
            Me.columnZ1CuttingPosAf = MyBase.Columns("Z1CuttingPosAf")
            Me.columnZ1ChippingBe = MyBase.Columns("Z1ChippingBe")
            Me.columnZ1ChippingAct = MyBase.Columns("Z1ChippingAct")
            Me.columnZ1ChippingAf = MyBase.Columns("Z1ChippingAf")
            Me.columnZ2KerfWidthBe = MyBase.Columns("Z2KerfWidthBe")
            Me.columnZ2KerfWidthAct = MyBase.Columns("Z2KerfWidthAct")
            Me.columnZ2KerfWidthAf = MyBase.Columns("Z2KerfWidthAf")
            Me.columnZ2CuttingPosBe = MyBase.Columns("Z2CuttingPosBe")
            Me.columnZ2CuttingPosAct = MyBase.Columns("Z2CuttingPosAct")
            Me.columnZ2CuttingPosAf = MyBase.Columns("Z2CuttingPosAf")
            Me.columnZ2ChippingBe = MyBase.Columns("Z2ChippingBe")
            Me.columnZ2ChippingAct = MyBase.Columns("Z2ChippingAct")
            Me.columnZ2ChippingAf = MyBase.Columns("Z2ChippingAf")
            Me.columnPKGBurrBe = MyBase.Columns("PKGBurrBe")
            Me.columnPKGBurrAf = MyBase.Columns("PKGBurrAf")
            Me.columnMeltPlateBe = MyBase.Columns("MeltPlateBe")
            Me.columnMeltPlateAf = MyBase.Columns("MeltPlateAf")
            Me.columnCrackChippingBe = MyBase.Columns("CrackChippingBe")
            Me.columnCrackChippingAf = MyBase.Columns("CrackChippingAf")
            Me.columnCutDepthBe = MyBase.Columns("CutDepthBe")
            Me.columnCutDepthAf = MyBase.Columns("CutDepthAf")
            Me.columnZ1BladeAmonthWear = MyBase.Columns("Z1BladeAmonthWear")
            Me.columnZ2BladeAmonthWear = MyBase.Columns("Z2BladeAmonthWear")
            Me.columnZ1BladeChange = MyBase.Columns("Z1BladeChange")
            Me.columnZ2BladeChange = MyBase.Columns("Z2BladeChange")
            Me.columnZ1BladeCarlibation = MyBase.Columns("Z1BladeCarlibation")
            Me.columnZ2BladeCarlibation = MyBase.Columns("Z2BladeCarlibation")
            Me.columnAlmNotFoundMacroTargQty = MyBase.Columns("AlmNotFoundMacroTargQty")
            Me.columnAlmNotFoundMicroTargQty = MyBase.Columns("AlmNotFoundMicroTargQty")
            Me.columnAlmLeastSqareApproxQty = MyBase.Columns("AlmLeastSqareApproxQty")
            Me.columnAlmNonContSetupCheckQty = MyBase.Columns("AlmNonContSetupCheckQty")
            Me.columnAlmNonContSetupReppErrQty = MyBase.Columns("AlmNonContSetupReppErrQty")
            Me.columnAlmBladeWearErrQty = MyBase.Columns("AlmBladeWearErrQty")
            Me.columnAlmBladeExposLimitQty = MyBase.Columns("AlmBladeExposLimitQty")
            Me.columnAlmCutWaferFlowLowLimitQty = MyBase.Columns("AlmCutWaferFlowLowLimitQty")
            Me.columnAndon = MyBase.Columns("Andon")
            Me.columnOPJudgement = MyBase.Columns("OPJudgement")
            Me.columnLotJudgement = MyBase.Columns("LotJudgement")
            Me.columnSelfConVersion = MyBase.Columns("SelfConVersion")
            Me.columnNetVersion = MyBase.Columns("NetVersion")
            Me.columnGLCheck = MyBase.Columns("GLCheck")
            Me.columnRemark = MyBase.Columns("Remark")
            Me.columnZ1BladeType = MyBase.Columns("Z1BladeType")
            Me.columnZ2BladeType = MyBase.Columns("Z2BladeType")
            Me.columnZ1BladeLotNo = MyBase.Columns("Z1BladeLotNo")
            Me.columnZ2BladeLotNo = MyBase.Columns("Z2BladeLotNo")
            Me.columnLeadZingScratchBe = MyBase.Columns("LeadZingScratchBe")
            Me.columnLeadZingScratchAf = MyBase.Columns("LeadZingScratchAf")
            Me.columnMakerQty = MyBase.Columns("MakerQty")
            Me.columnICOffQty = MyBase.Columns("ICOffQty")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnMCNo = New Global.System.Data.DataColumn("MCNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMCNo)
            Me.columnLotNo = New Global.System.Data.DataColumn("LotNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotNo)
            Me.columnLotStartTime = New Global.System.Data.DataColumn("LotStartTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotStartTime)
            Me.columnLotEndTime = New Global.System.Data.DataColumn("LotEndTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotEndTime)
            Me.columnOPNo = New Global.System.Data.DataColumn("OPNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPNo)
            Me.columnInputQty = New Global.System.Data.DataColumn("InputQty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInputQty)
            Me.columnTotalGood = New Global.System.Data.DataColumn("TotalGood", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalGood)
            Me.columnTotalNG = New Global.System.Data.DataColumn("TotalNG", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalNG)
            Me.columnCutSpeed = New Global.System.Data.DataColumn("CutSpeed", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCutSpeed)
            Me.columnTableCheck = New Global.System.Data.DataColumn("TableCheck", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTableCheck)
            Me.columnZ1KerfWidthBe = New Global.System.Data.DataColumn("Z1KerfWidthBe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZ1KerfWidthBe)
            Me.columnZ1KerfWidthAct = New Global.System.Data.DataColumn("Z1KerfWidthAct", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZ1KerfWidthAct)
            Me.columnZ1KerfWidthAf = New Global.System.Data.DataColumn("Z1KerfWidthAf", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZ1KerfWidthAf)
            Me.columnZ1CuttingPosBe = New Global.System.Data.DataColumn("Z1CuttingPosBe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZ1CuttingPosBe)
            Me.columnZ1CuttingPosAct = New Global.System.Data.DataColumn("Z1CuttingPosAct", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZ1CuttingPosAct)
            Me.columnZ1CuttingPosAf = New Global.System.Data.DataColumn("Z1CuttingPosAf", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZ1CuttingPosAf)
            Me.columnZ1ChippingBe = New Global.System.Data.DataColumn("Z1ChippingBe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZ1ChippingBe)
            Me.columnZ1ChippingAct = New Global.System.Data.DataColumn("Z1ChippingAct", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZ1ChippingAct)
            Me.columnZ1ChippingAf = New Global.System.Data.DataColumn("Z1ChippingAf", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZ1ChippingAf)
            Me.columnZ2KerfWidthBe = New Global.System.Data.DataColumn("Z2KerfWidthBe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZ2KerfWidthBe)
            Me.columnZ2KerfWidthAct = New Global.System.Data.DataColumn("Z2KerfWidthAct", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZ2KerfWidthAct)
            Me.columnZ2KerfWidthAf = New Global.System.Data.DataColumn("Z2KerfWidthAf", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZ2KerfWidthAf)
            Me.columnZ2CuttingPosBe = New Global.System.Data.DataColumn("Z2CuttingPosBe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZ2CuttingPosBe)
            Me.columnZ2CuttingPosAct = New Global.System.Data.DataColumn("Z2CuttingPosAct", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZ2CuttingPosAct)
            Me.columnZ2CuttingPosAf = New Global.System.Data.DataColumn("Z2CuttingPosAf", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZ2CuttingPosAf)
            Me.columnZ2ChippingBe = New Global.System.Data.DataColumn("Z2ChippingBe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZ2ChippingBe)
            Me.columnZ2ChippingAct = New Global.System.Data.DataColumn("Z2ChippingAct", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZ2ChippingAct)
            Me.columnZ2ChippingAf = New Global.System.Data.DataColumn("Z2ChippingAf", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZ2ChippingAf)
            Me.columnPKGBurrBe = New Global.System.Data.DataColumn("PKGBurrBe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPKGBurrBe)
            Me.columnPKGBurrAf = New Global.System.Data.DataColumn("PKGBurrAf", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPKGBurrAf)
            Me.columnMeltPlateBe = New Global.System.Data.DataColumn("MeltPlateBe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMeltPlateBe)
            Me.columnMeltPlateAf = New Global.System.Data.DataColumn("MeltPlateAf", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMeltPlateAf)
            Me.columnCrackChippingBe = New Global.System.Data.DataColumn("CrackChippingBe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCrackChippingBe)
            Me.columnCrackChippingAf = New Global.System.Data.DataColumn("CrackChippingAf", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCrackChippingAf)
            Me.columnCutDepthBe = New Global.System.Data.DataColumn("CutDepthBe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCutDepthBe)
            Me.columnCutDepthAf = New Global.System.Data.DataColumn("CutDepthAf", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCutDepthAf)
            Me.columnZ1BladeAmonthWear = New Global.System.Data.DataColumn("Z1BladeAmonthWear", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZ1BladeAmonthWear)
            Me.columnZ2BladeAmonthWear = New Global.System.Data.DataColumn("Z2BladeAmonthWear", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZ2BladeAmonthWear)
            Me.columnZ1BladeChange = New Global.System.Data.DataColumn("Z1BladeChange", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZ1BladeChange)
            Me.columnZ2BladeChange = New Global.System.Data.DataColumn("Z2BladeChange", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZ2BladeChange)
            Me.columnZ1BladeCarlibation = New Global.System.Data.DataColumn("Z1BladeCarlibation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZ1BladeCarlibation)
            Me.columnZ2BladeCarlibation = New Global.System.Data.DataColumn("Z2BladeCarlibation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZ2BladeCarlibation)
            Me.columnAlmNotFoundMacroTargQty = New Global.System.Data.DataColumn("AlmNotFoundMacroTargQty", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAlmNotFoundMacroTargQty)
            Me.columnAlmNotFoundMicroTargQty = New Global.System.Data.DataColumn("AlmNotFoundMicroTargQty", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAlmNotFoundMicroTargQty)
            Me.columnAlmLeastSqareApproxQty = New Global.System.Data.DataColumn("AlmLeastSqareApproxQty", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAlmLeastSqareApproxQty)
            Me.columnAlmNonContSetupCheckQty = New Global.System.Data.DataColumn("AlmNonContSetupCheckQty", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAlmNonContSetupCheckQty)
            Me.columnAlmNonContSetupReppErrQty = New Global.System.Data.DataColumn("AlmNonContSetupReppErrQty", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAlmNonContSetupReppErrQty)
            Me.columnAlmBladeWearErrQty = New Global.System.Data.DataColumn("AlmBladeWearErrQty", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAlmBladeWearErrQty)
            Me.columnAlmBladeExposLimitQty = New Global.System.Data.DataColumn("AlmBladeExposLimitQty", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAlmBladeExposLimitQty)
            Me.columnAlmCutWaferFlowLowLimitQty = New Global.System.Data.DataColumn("AlmCutWaferFlowLowLimitQty", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAlmCutWaferFlowLowLimitQty)
            Me.columnAndon = New Global.System.Data.DataColumn("Andon", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAndon)
            Me.columnOPJudgement = New Global.System.Data.DataColumn("OPJudgement", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPJudgement)
            Me.columnLotJudgement = New Global.System.Data.DataColumn("LotJudgement", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotJudgement)
            Me.columnSelfConVersion = New Global.System.Data.DataColumn("SelfConVersion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSelfConVersion)
            Me.columnNetVersion = New Global.System.Data.DataColumn("NetVersion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNetVersion)
            Me.columnGLCheck = New Global.System.Data.DataColumn("GLCheck", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGLCheck)
            Me.columnRemark = New Global.System.Data.DataColumn("Remark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemark)
            Me.columnZ1BladeType = New Global.System.Data.DataColumn("Z1BladeType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZ1BladeType)
            Me.columnZ2BladeType = New Global.System.Data.DataColumn("Z2BladeType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZ2BladeType)
            Me.columnZ1BladeLotNo = New Global.System.Data.DataColumn("Z1BladeLotNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZ1BladeLotNo)
            Me.columnZ2BladeLotNo = New Global.System.Data.DataColumn("Z2BladeLotNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZ2BladeLotNo)
            Me.columnLeadZingScratchBe = New Global.System.Data.DataColumn("LeadZingScratchBe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeadZingScratchBe)
            Me.columnLeadZingScratchAf = New Global.System.Data.DataColumn("LeadZingScratchAf", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeadZingScratchAf)
            Me.columnMakerQty = New Global.System.Data.DataColumn("MakerQty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMakerQty)
            Me.columnICOffQty = New Global.System.Data.DataColumn("ICOffQty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICOffQty)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMCNo, Me.columnLotNo, Me.columnLotStartTime}, true))
            Me.columnMCNo.AllowDBNull = false
            Me.columnMCNo.MaxLength = 10
            Me.columnLotNo.AllowDBNull = false
            Me.columnLotNo.MaxLength = 10
            Me.columnLotStartTime.AllowDBNull = false
            Me.columnOPNo.MaxLength = 10
            Me.columnCutSpeed.MaxLength = 5
            Me.columnTableCheck.MaxLength = 2
            Me.columnZ1KerfWidthBe.MaxLength = 1
            Me.columnZ1KerfWidthAf.MaxLength = 1
            Me.columnZ1CuttingPosBe.MaxLength = 1
            Me.columnZ1CuttingPosAf.MaxLength = 1
            Me.columnZ1ChippingBe.MaxLength = 1
            Me.columnZ1ChippingAf.MaxLength = 1
            Me.columnZ2KerfWidthBe.MaxLength = 1
            Me.columnZ2KerfWidthAf.MaxLength = 1
            Me.columnZ2CuttingPosBe.MaxLength = 1
            Me.columnZ2CuttingPosAf.MaxLength = 1
            Me.columnZ2ChippingBe.MaxLength = 1
            Me.columnZ2ChippingAf.MaxLength = 1
            Me.columnPKGBurrBe.MaxLength = 1
            Me.columnPKGBurrAf.MaxLength = 1
            Me.columnMeltPlateBe.MaxLength = 1
            Me.columnMeltPlateAf.MaxLength = 1
            Me.columnCrackChippingBe.MaxLength = 1
            Me.columnCrackChippingAf.MaxLength = 1
            Me.columnCutDepthBe.MaxLength = 1
            Me.columnCutDepthAf.MaxLength = 1
            Me.columnZ1BladeChange.MaxLength = 1
            Me.columnZ2BladeChange.MaxLength = 1
            Me.columnZ1BladeCarlibation.MaxLength = 1
            Me.columnZ2BladeCarlibation.MaxLength = 1
            Me.columnAlmNotFoundMacroTargQty.DefaultValue = CType(0,Short)
            Me.columnAlmNotFoundMicroTargQty.DefaultValue = CType(0,Short)
            Me.columnAlmLeastSqareApproxQty.DefaultValue = CType(0,Short)
            Me.columnAlmNonContSetupCheckQty.DefaultValue = CType(0,Short)
            Me.columnAlmNonContSetupReppErrQty.DefaultValue = CType(0,Short)
            Me.columnAlmBladeWearErrQty.DefaultValue = CType(0,Short)
            Me.columnAlmBladeExposLimitQty.DefaultValue = CType(0,Short)
            Me.columnAlmCutWaferFlowLowLimitQty.DefaultValue = CType(0,Short)
            Me.columnAndon.MaxLength = 1
            Me.columnOPJudgement.MaxLength = 6
            Me.columnLotJudgement.MaxLength = 2
            Me.columnSelfConVersion.MaxLength = 50
            Me.columnNetVersion.MaxLength = 50
            Me.columnGLCheck.MaxLength = 6
            Me.columnRemark.MaxLength = 50
            Me.columnZ1BladeType.MaxLength = 20
            Me.columnZ2BladeType.MaxLength = 20
            Me.columnZ1BladeLotNo.MaxLength = 20
            Me.columnZ2BladeLotNo.MaxLength = 20
            Me.columnLeadZingScratchBe.MaxLength = 1
            Me.columnLeadZingScratchAf.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewMAPPKGDCDataRow() As MAPPKGDCDataRow
            Return CType(Me.NewRow,MAPPKGDCDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MAPPKGDCDataRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MAPPKGDCDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MAPPKGDCDataRowChangedEvent) Is Nothing) Then
                RaiseEvent MAPPKGDCDataRowChanged(Me, New MAPPKGDCDataRowChangeEvent(CType(e.Row,MAPPKGDCDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MAPPKGDCDataRowChangingEvent) Is Nothing) Then
                RaiseEvent MAPPKGDCDataRowChanging(Me, New MAPPKGDCDataRowChangeEvent(CType(e.Row,MAPPKGDCDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MAPPKGDCDataRowDeletedEvent) Is Nothing) Then
                RaiseEvent MAPPKGDCDataRowDeleted(Me, New MAPPKGDCDataRowChangeEvent(CType(e.Row,MAPPKGDCDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MAPPKGDCDataRowDeletingEvent) Is Nothing) Then
                RaiseEvent MAPPKGDCDataRowDeleting(Me, New MAPPKGDCDataRowChangeEvent(CType(e.Row,MAPPKGDCDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveMAPPKGDCDataRow(ByVal row As MAPPKGDCDataRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DBxDataSet = New DBxDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MAPPKGDCDataDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MAPPKGMTDataDataTable
        Inherits Global.System.Data.TypedTableBase(Of MAPPKGMTDataRow)
        
        Private columnLotNo As Global.System.Data.DataColumn
        
        Private columnLotStartTime As Global.System.Data.DataColumn
        
        Private columnTotalGood As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MAPPKGMTData"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LotNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LotStartTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotStartTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TotalGoodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalGood
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MAPPKGMTDataRow
            Get
                Return CType(Me.Rows(index),MAPPKGMTDataRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAPPKGMTDataRowChanging As MAPPKGMTDataRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAPPKGMTDataRowChanged As MAPPKGMTDataRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAPPKGMTDataRowDeleting As MAPPKGMTDataRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAPPKGMTDataRowDeleted As MAPPKGMTDataRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddMAPPKGMTDataRow(ByVal row As MAPPKGMTDataRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddMAPPKGMTDataRow(ByVal LotNo As String, ByVal LotStartTime As Date, ByVal TotalGood As Integer) As MAPPKGMTDataRow
            Dim rowMAPPKGMTDataRow As MAPPKGMTDataRow = CType(Me.NewRow,MAPPKGMTDataRow)
            Dim columnValuesArray() As Object = New Object() {LotNo, LotStartTime, TotalGood}
            rowMAPPKGMTDataRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMAPPKGMTDataRow)
            Return rowMAPPKGMTDataRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MAPPKGMTDataDataTable = CType(MyBase.Clone,MAPPKGMTDataDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MAPPKGMTDataDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnLotNo = MyBase.Columns("LotNo")
            Me.columnLotStartTime = MyBase.Columns("LotStartTime")
            Me.columnTotalGood = MyBase.Columns("TotalGood")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnLotNo = New Global.System.Data.DataColumn("LotNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotNo)
            Me.columnLotStartTime = New Global.System.Data.DataColumn("LotStartTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotStartTime)
            Me.columnTotalGood = New Global.System.Data.DataColumn("TotalGood", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalGood)
            Me.columnLotNo.AllowDBNull = false
            Me.columnLotNo.MaxLength = 10
            Me.columnLotStartTime.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewMAPPKGMTDataRow() As MAPPKGMTDataRow
            Return CType(Me.NewRow,MAPPKGMTDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MAPPKGMTDataRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MAPPKGMTDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MAPPKGMTDataRowChangedEvent) Is Nothing) Then
                RaiseEvent MAPPKGMTDataRowChanged(Me, New MAPPKGMTDataRowChangeEvent(CType(e.Row,MAPPKGMTDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MAPPKGMTDataRowChangingEvent) Is Nothing) Then
                RaiseEvent MAPPKGMTDataRowChanging(Me, New MAPPKGMTDataRowChangeEvent(CType(e.Row,MAPPKGMTDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MAPPKGMTDataRowDeletedEvent) Is Nothing) Then
                RaiseEvent MAPPKGMTDataRowDeleted(Me, New MAPPKGMTDataRowChangeEvent(CType(e.Row,MAPPKGMTDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MAPPKGMTDataRowDeletingEvent) Is Nothing) Then
                RaiseEvent MAPPKGMTDataRowDeleting(Me, New MAPPKGMTDataRowChangeEvent(CType(e.Row,MAPPKGMTDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveMAPPKGMTDataRow(ByVal row As MAPPKGMTDataRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DBxDataSet = New DBxDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MAPPKGMTDataDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class TransactionDataRow
        Inherits Global.System.Data.DataRow
        
        Private tableTransactionData As TransactionDataDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTransactionData = CType(Me.Table,TransactionDataDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LotNo() As String
            Get
                Return CType(Me(Me.tableTransactionData.LotNoColumn),String)
            End Get
            Set
                Me(Me.tableTransactionData.LotNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Package() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionData.PackageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Package' in table 'TransactionData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionData.PackageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Device() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionData.DeviceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Device' in table 'TransactionData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionData.DeviceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MarkTextLine1() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionData.MarkTextLine1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MarkTextLine1' in table 'TransactionData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionData.MarkTextLine1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MarkTextLine2() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionData.MarkTextLine2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MarkTextLine2' in table 'TransactionData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionData.MarkTextLine2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MarkTextLine3() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionData.MarkTextLine3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MarkTextLine3' in table 'TransactionData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionData.MarkTextLine3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPackageNull() As Boolean
            Return Me.IsNull(Me.tableTransactionData.PackageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPackageNull()
            Me(Me.tableTransactionData.PackageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDeviceNull() As Boolean
            Return Me.IsNull(Me.tableTransactionData.DeviceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDeviceNull()
            Me(Me.tableTransactionData.DeviceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMarkTextLine1Null() As Boolean
            Return Me.IsNull(Me.tableTransactionData.MarkTextLine1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMarkTextLine1Null()
            Me(Me.tableTransactionData.MarkTextLine1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMarkTextLine2Null() As Boolean
            Return Me.IsNull(Me.tableTransactionData.MarkTextLine2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMarkTextLine2Null()
            Me(Me.tableTransactionData.MarkTextLine2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMarkTextLine3Null() As Boolean
            Return Me.IsNull(Me.tableTransactionData.MarkTextLine3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMarkTextLine3Null()
            Me(Me.tableTransactionData.MarkTextLine3Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class MAPPKGDCDataRow
        Inherits Global.System.Data.DataRow
        
        Private tableMAPPKGDCData As MAPPKGDCDataDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMAPPKGDCData = CType(Me.Table,MAPPKGDCDataDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MCNo() As String
            Get
                Return CType(Me(Me.tableMAPPKGDCData.MCNoColumn),String)
            End Get
            Set
                Me(Me.tableMAPPKGDCData.MCNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LotNo() As String
            Get
                Return CType(Me(Me.tableMAPPKGDCData.LotNoColumn),String)
            End Get
            Set
                Me(Me.tableMAPPKGDCData.LotNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LotStartTime() As Date
            Get
                Return CType(Me(Me.tableMAPPKGDCData.LotStartTimeColumn),Date)
            End Get
            Set
                Me(Me.tableMAPPKGDCData.LotStartTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LotEndTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.LotEndTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LotEndTime' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.LotEndTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OPNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.OPNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPNo' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.OPNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property InputQty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.InputQtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InputQty' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.InputQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TotalGood() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.TotalGoodColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalGood' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.TotalGoodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TotalNG() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.TotalNGColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalNG' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.TotalNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CutSpeed() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.CutSpeedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CutSpeed' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.CutSpeedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TableCheck() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.TableCheckColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TableCheck' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.TableCheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Z1KerfWidthBe() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.Z1KerfWidthBeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Z1KerfWidthBe' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.Z1KerfWidthBeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Z1KerfWidthAct() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.Z1KerfWidthActColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Z1KerfWidthAct' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.Z1KerfWidthActColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Z1KerfWidthAf() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.Z1KerfWidthAfColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Z1KerfWidthAf' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.Z1KerfWidthAfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Z1CuttingPosBe() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.Z1CuttingPosBeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Z1CuttingPosBe' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.Z1CuttingPosBeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Z1CuttingPosAct() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.Z1CuttingPosActColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Z1CuttingPosAct' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.Z1CuttingPosActColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Z1CuttingPosAf() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.Z1CuttingPosAfColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Z1CuttingPosAf' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.Z1CuttingPosAfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Z1ChippingBe() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.Z1ChippingBeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Z1ChippingBe' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.Z1ChippingBeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Z1ChippingAct() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.Z1ChippingActColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Z1ChippingAct' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.Z1ChippingActColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Z1ChippingAf() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.Z1ChippingAfColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Z1ChippingAf' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.Z1ChippingAfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Z2KerfWidthBe() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.Z2KerfWidthBeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Z2KerfWidthBe' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.Z2KerfWidthBeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Z2KerfWidthAct() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.Z2KerfWidthActColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Z2KerfWidthAct' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.Z2KerfWidthActColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Z2KerfWidthAf() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.Z2KerfWidthAfColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Z2KerfWidthAf' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.Z2KerfWidthAfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Z2CuttingPosBe() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.Z2CuttingPosBeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Z2CuttingPosBe' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.Z2CuttingPosBeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Z2CuttingPosAct() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.Z2CuttingPosActColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Z2CuttingPosAct' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.Z2CuttingPosActColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Z2CuttingPosAf() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.Z2CuttingPosAfColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Z2CuttingPosAf' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.Z2CuttingPosAfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Z2ChippingBe() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.Z2ChippingBeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Z2ChippingBe' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.Z2ChippingBeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Z2ChippingAct() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.Z2ChippingActColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Z2ChippingAct' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.Z2ChippingActColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Z2ChippingAf() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.Z2ChippingAfColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Z2ChippingAf' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.Z2ChippingAfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PKGBurrBe() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.PKGBurrBeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PKGBurrBe' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.PKGBurrBeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PKGBurrAf() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.PKGBurrAfColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PKGBurrAf' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.PKGBurrAfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MeltPlateBe() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.MeltPlateBeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MeltPlateBe' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.MeltPlateBeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MeltPlateAf() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.MeltPlateAfColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MeltPlateAf' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.MeltPlateAfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CrackChippingBe() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.CrackChippingBeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CrackChippingBe' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.CrackChippingBeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CrackChippingAf() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.CrackChippingAfColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CrackChippingAf' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.CrackChippingAfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CutDepthBe() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.CutDepthBeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CutDepthBe' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.CutDepthBeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CutDepthAf() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.CutDepthAfColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CutDepthAf' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.CutDepthAfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Z1BladeAmonthWear() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.Z1BladeAmonthWearColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Z1BladeAmonthWear' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.Z1BladeAmonthWearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Z2BladeAmonthWear() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.Z2BladeAmonthWearColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Z2BladeAmonthWear' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.Z2BladeAmonthWearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Z1BladeChange() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.Z1BladeChangeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Z1BladeChange' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.Z1BladeChangeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Z2BladeChange() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.Z2BladeChangeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Z2BladeChange' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.Z2BladeChangeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Z1BladeCarlibation() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.Z1BladeCarlibationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Z1BladeCarlibation' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.Z1BladeCarlibationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Z2BladeCarlibation() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.Z2BladeCarlibationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Z2BladeCarlibation' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.Z2BladeCarlibationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AlmNotFoundMacroTargQty() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.AlmNotFoundMacroTargQtyColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AlmNotFoundMacroTargQty' in table 'MAPPKGDCData' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.AlmNotFoundMacroTargQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AlmNotFoundMicroTargQty() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.AlmNotFoundMicroTargQtyColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AlmNotFoundMicroTargQty' in table 'MAPPKGDCData' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.AlmNotFoundMicroTargQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AlmLeastSqareApproxQty() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.AlmLeastSqareApproxQtyColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AlmLeastSqareApproxQty' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.AlmLeastSqareApproxQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AlmNonContSetupCheckQty() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.AlmNonContSetupCheckQtyColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AlmNonContSetupCheckQty' in table 'MAPPKGDCData' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.AlmNonContSetupCheckQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AlmNonContSetupReppErrQty() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.AlmNonContSetupReppErrQtyColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AlmNonContSetupReppErrQty' in table 'MAPPKGDCData' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.AlmNonContSetupReppErrQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AlmBladeWearErrQty() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.AlmBladeWearErrQtyColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AlmBladeWearErrQty' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.AlmBladeWearErrQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AlmBladeExposLimitQty() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.AlmBladeExposLimitQtyColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AlmBladeExposLimitQty' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.AlmBladeExposLimitQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AlmCutWaferFlowLowLimitQty() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.AlmCutWaferFlowLowLimitQtyColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AlmCutWaferFlowLowLimitQty' in table 'MAPPKGDCData' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.AlmCutWaferFlowLowLimitQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Andon() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.AndonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Andon' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.AndonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OPJudgement() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.OPJudgementColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPJudgement' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.OPJudgementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LotJudgement() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.LotJudgementColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LotJudgement' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.LotJudgementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SelfConVersion() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.SelfConVersionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SelfConVersion' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.SelfConVersionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NetVersion() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.NetVersionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NetVersion' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.NetVersionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GLCheck() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.GLCheckColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GLCheck' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.GLCheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Remark() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.RemarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remark' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.RemarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Z1BladeType() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.Z1BladeTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Z1BladeType' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.Z1BladeTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Z2BladeType() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.Z2BladeTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Z2BladeType' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.Z2BladeTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Z1BladeLotNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.Z1BladeLotNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Z1BladeLotNo' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.Z1BladeLotNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Z2BladeLotNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.Z2BladeLotNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Z2BladeLotNo' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.Z2BladeLotNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LeadZingScratchBe() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.LeadZingScratchBeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LeadZingScratchBe' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.LeadZingScratchBeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LeadZingScratchAf() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.LeadZingScratchAfColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LeadZingScratchAf' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.LeadZingScratchAfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MakerQty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.MakerQtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MakerQty' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.MakerQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ICOffQty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGDCData.ICOffQtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ICOffQty' in table 'MAPPKGDCData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGDCData.ICOffQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLotEndTimeNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.LotEndTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLotEndTimeNull()
            Me(Me.tableMAPPKGDCData.LotEndTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOPNoNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.OPNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOPNoNull()
            Me(Me.tableMAPPKGDCData.OPNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsInputQtyNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.InputQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetInputQtyNull()
            Me(Me.tableMAPPKGDCData.InputQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTotalGoodNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.TotalGoodColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTotalGoodNull()
            Me(Me.tableMAPPKGDCData.TotalGoodColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTotalNGNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.TotalNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTotalNGNull()
            Me(Me.tableMAPPKGDCData.TotalNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCutSpeedNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.CutSpeedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCutSpeedNull()
            Me(Me.tableMAPPKGDCData.CutSpeedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTableCheckNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.TableCheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTableCheckNull()
            Me(Me.tableMAPPKGDCData.TableCheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsZ1KerfWidthBeNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.Z1KerfWidthBeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetZ1KerfWidthBeNull()
            Me(Me.tableMAPPKGDCData.Z1KerfWidthBeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsZ1KerfWidthActNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.Z1KerfWidthActColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetZ1KerfWidthActNull()
            Me(Me.tableMAPPKGDCData.Z1KerfWidthActColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsZ1KerfWidthAfNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.Z1KerfWidthAfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetZ1KerfWidthAfNull()
            Me(Me.tableMAPPKGDCData.Z1KerfWidthAfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsZ1CuttingPosBeNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.Z1CuttingPosBeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetZ1CuttingPosBeNull()
            Me(Me.tableMAPPKGDCData.Z1CuttingPosBeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsZ1CuttingPosActNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.Z1CuttingPosActColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetZ1CuttingPosActNull()
            Me(Me.tableMAPPKGDCData.Z1CuttingPosActColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsZ1CuttingPosAfNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.Z1CuttingPosAfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetZ1CuttingPosAfNull()
            Me(Me.tableMAPPKGDCData.Z1CuttingPosAfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsZ1ChippingBeNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.Z1ChippingBeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetZ1ChippingBeNull()
            Me(Me.tableMAPPKGDCData.Z1ChippingBeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsZ1ChippingActNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.Z1ChippingActColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetZ1ChippingActNull()
            Me(Me.tableMAPPKGDCData.Z1ChippingActColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsZ1ChippingAfNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.Z1ChippingAfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetZ1ChippingAfNull()
            Me(Me.tableMAPPKGDCData.Z1ChippingAfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsZ2KerfWidthBeNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.Z2KerfWidthBeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetZ2KerfWidthBeNull()
            Me(Me.tableMAPPKGDCData.Z2KerfWidthBeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsZ2KerfWidthActNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.Z2KerfWidthActColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetZ2KerfWidthActNull()
            Me(Me.tableMAPPKGDCData.Z2KerfWidthActColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsZ2KerfWidthAfNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.Z2KerfWidthAfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetZ2KerfWidthAfNull()
            Me(Me.tableMAPPKGDCData.Z2KerfWidthAfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsZ2CuttingPosBeNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.Z2CuttingPosBeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetZ2CuttingPosBeNull()
            Me(Me.tableMAPPKGDCData.Z2CuttingPosBeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsZ2CuttingPosActNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.Z2CuttingPosActColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetZ2CuttingPosActNull()
            Me(Me.tableMAPPKGDCData.Z2CuttingPosActColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsZ2CuttingPosAfNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.Z2CuttingPosAfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetZ2CuttingPosAfNull()
            Me(Me.tableMAPPKGDCData.Z2CuttingPosAfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsZ2ChippingBeNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.Z2ChippingBeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetZ2ChippingBeNull()
            Me(Me.tableMAPPKGDCData.Z2ChippingBeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsZ2ChippingActNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.Z2ChippingActColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetZ2ChippingActNull()
            Me(Me.tableMAPPKGDCData.Z2ChippingActColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsZ2ChippingAfNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.Z2ChippingAfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetZ2ChippingAfNull()
            Me(Me.tableMAPPKGDCData.Z2ChippingAfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPKGBurrBeNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.PKGBurrBeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPKGBurrBeNull()
            Me(Me.tableMAPPKGDCData.PKGBurrBeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPKGBurrAfNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.PKGBurrAfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPKGBurrAfNull()
            Me(Me.tableMAPPKGDCData.PKGBurrAfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMeltPlateBeNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.MeltPlateBeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMeltPlateBeNull()
            Me(Me.tableMAPPKGDCData.MeltPlateBeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMeltPlateAfNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.MeltPlateAfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMeltPlateAfNull()
            Me(Me.tableMAPPKGDCData.MeltPlateAfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCrackChippingBeNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.CrackChippingBeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCrackChippingBeNull()
            Me(Me.tableMAPPKGDCData.CrackChippingBeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCrackChippingAfNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.CrackChippingAfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCrackChippingAfNull()
            Me(Me.tableMAPPKGDCData.CrackChippingAfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCutDepthBeNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.CutDepthBeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCutDepthBeNull()
            Me(Me.tableMAPPKGDCData.CutDepthBeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCutDepthAfNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.CutDepthAfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCutDepthAfNull()
            Me(Me.tableMAPPKGDCData.CutDepthAfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsZ1BladeAmonthWearNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.Z1BladeAmonthWearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetZ1BladeAmonthWearNull()
            Me(Me.tableMAPPKGDCData.Z1BladeAmonthWearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsZ2BladeAmonthWearNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.Z2BladeAmonthWearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetZ2BladeAmonthWearNull()
            Me(Me.tableMAPPKGDCData.Z2BladeAmonthWearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsZ1BladeChangeNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.Z1BladeChangeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetZ1BladeChangeNull()
            Me(Me.tableMAPPKGDCData.Z1BladeChangeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsZ2BladeChangeNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.Z2BladeChangeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetZ2BladeChangeNull()
            Me(Me.tableMAPPKGDCData.Z2BladeChangeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsZ1BladeCarlibationNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.Z1BladeCarlibationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetZ1BladeCarlibationNull()
            Me(Me.tableMAPPKGDCData.Z1BladeCarlibationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsZ2BladeCarlibationNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.Z2BladeCarlibationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetZ2BladeCarlibationNull()
            Me(Me.tableMAPPKGDCData.Z2BladeCarlibationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAlmNotFoundMacroTargQtyNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.AlmNotFoundMacroTargQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAlmNotFoundMacroTargQtyNull()
            Me(Me.tableMAPPKGDCData.AlmNotFoundMacroTargQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAlmNotFoundMicroTargQtyNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.AlmNotFoundMicroTargQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAlmNotFoundMicroTargQtyNull()
            Me(Me.tableMAPPKGDCData.AlmNotFoundMicroTargQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAlmLeastSqareApproxQtyNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.AlmLeastSqareApproxQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAlmLeastSqareApproxQtyNull()
            Me(Me.tableMAPPKGDCData.AlmLeastSqareApproxQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAlmNonContSetupCheckQtyNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.AlmNonContSetupCheckQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAlmNonContSetupCheckQtyNull()
            Me(Me.tableMAPPKGDCData.AlmNonContSetupCheckQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAlmNonContSetupReppErrQtyNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.AlmNonContSetupReppErrQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAlmNonContSetupReppErrQtyNull()
            Me(Me.tableMAPPKGDCData.AlmNonContSetupReppErrQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAlmBladeWearErrQtyNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.AlmBladeWearErrQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAlmBladeWearErrQtyNull()
            Me(Me.tableMAPPKGDCData.AlmBladeWearErrQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAlmBladeExposLimitQtyNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.AlmBladeExposLimitQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAlmBladeExposLimitQtyNull()
            Me(Me.tableMAPPKGDCData.AlmBladeExposLimitQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAlmCutWaferFlowLowLimitQtyNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.AlmCutWaferFlowLowLimitQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAlmCutWaferFlowLowLimitQtyNull()
            Me(Me.tableMAPPKGDCData.AlmCutWaferFlowLowLimitQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAndonNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.AndonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAndonNull()
            Me(Me.tableMAPPKGDCData.AndonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOPJudgementNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.OPJudgementColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOPJudgementNull()
            Me(Me.tableMAPPKGDCData.OPJudgementColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLotJudgementNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.LotJudgementColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLotJudgementNull()
            Me(Me.tableMAPPKGDCData.LotJudgementColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSelfConVersionNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.SelfConVersionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSelfConVersionNull()
            Me(Me.tableMAPPKGDCData.SelfConVersionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNetVersionNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.NetVersionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNetVersionNull()
            Me(Me.tableMAPPKGDCData.NetVersionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsGLCheckNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.GLCheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetGLCheckNull()
            Me(Me.tableMAPPKGDCData.GLCheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRemarkNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.RemarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRemarkNull()
            Me(Me.tableMAPPKGDCData.RemarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsZ1BladeTypeNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.Z1BladeTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetZ1BladeTypeNull()
            Me(Me.tableMAPPKGDCData.Z1BladeTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsZ2BladeTypeNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.Z2BladeTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetZ2BladeTypeNull()
            Me(Me.tableMAPPKGDCData.Z2BladeTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsZ1BladeLotNoNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.Z1BladeLotNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetZ1BladeLotNoNull()
            Me(Me.tableMAPPKGDCData.Z1BladeLotNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsZ2BladeLotNoNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.Z2BladeLotNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetZ2BladeLotNoNull()
            Me(Me.tableMAPPKGDCData.Z2BladeLotNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLeadZingScratchBeNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.LeadZingScratchBeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLeadZingScratchBeNull()
            Me(Me.tableMAPPKGDCData.LeadZingScratchBeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLeadZingScratchAfNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.LeadZingScratchAfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLeadZingScratchAfNull()
            Me(Me.tableMAPPKGDCData.LeadZingScratchAfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMakerQtyNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.MakerQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMakerQtyNull()
            Me(Me.tableMAPPKGDCData.MakerQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsICOffQtyNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGDCData.ICOffQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetICOffQtyNull()
            Me(Me.tableMAPPKGDCData.ICOffQtyColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class MAPPKGMTDataRow
        Inherits Global.System.Data.DataRow
        
        Private tableMAPPKGMTData As MAPPKGMTDataDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMAPPKGMTData = CType(Me.Table,MAPPKGMTDataDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LotNo() As String
            Get
                Return CType(Me(Me.tableMAPPKGMTData.LotNoColumn),String)
            End Get
            Set
                Me(Me.tableMAPPKGMTData.LotNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LotStartTime() As Date
            Get
                Return CType(Me(Me.tableMAPPKGMTData.LotStartTimeColumn),Date)
            End Get
            Set
                Me(Me.tableMAPPKGMTData.LotStartTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TotalGood() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMAPPKGMTData.TotalGoodColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalGood' in table 'MAPPKGMTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAPPKGMTData.TotalGoodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTotalGoodNull() As Boolean
            Return Me.IsNull(Me.tableMAPPKGMTData.TotalGoodColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTotalGoodNull()
            Me(Me.tableMAPPKGMTData.TotalGoodColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class TransactionDataRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TransactionDataRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As TransactionDataRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As TransactionDataRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class MAPPKGDCDataRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MAPPKGDCDataRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As MAPPKGDCDataRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As MAPPKGDCDataRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class MAPPKGMTDataRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MAPPKGMTDataRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As MAPPKGMTDataRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As MAPPKGMTDataRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DBxDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TransactionDataTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TransactionData"
            tableMapping.ColumnMappings.Add("LotNo", "LotNo")
            tableMapping.ColumnMappings.Add("Package", "Package")
            tableMapping.ColumnMappings.Add("Device", "Device")
            tableMapping.ColumnMappings.Add("MarkTextLine1", "MarkTextLine1")
            tableMapping.ColumnMappings.Add("MarkTextLine2", "MarkTextLine2")
            tableMapping.ColumnMappings.Add("MarkTextLine3", "MarkTextLine3")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [TransactionData] WHERE (([LotNo] = @Original_LotNo) AND ((@IsNull_Pa"& _ 
                "ckage = 1 AND [Package] IS NULL) OR ([Package] = @Original_Package)) AND ((@IsNu"& _ 
                "ll_Device = 1 AND [Device] IS NULL) OR ([Device] = @Original_Device)) AND ((@IsN"& _ 
                "ull_MarkTextLine1 = 1 AND [MarkTextLine1] IS NULL) OR ([MarkTextLine1] = @Origin"& _ 
                "al_MarkTextLine1)) AND ((@IsNull_MarkTextLine2 = 1 AND [MarkTextLine2] IS NULL) "& _ 
                "OR ([MarkTextLine2] = @Original_MarkTextLine2)) AND ((@IsNull_MarkTextLine3 = 1 "& _ 
                "AND [MarkTextLine3] IS NULL) OR ([MarkTextLine3] = @Original_MarkTextLine3)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Package", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Package", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Package", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Package", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Device", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Device", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Device", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Device", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MarkTextLine1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkTextLine1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MarkTextLine1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkTextLine1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MarkTextLine2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkTextLine2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MarkTextLine2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkTextLine2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MarkTextLine3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkTextLine3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MarkTextLine3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkTextLine3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [TransactionData] ([LotNo], [Package], [Device], [MarkTextLine1], [Ma"& _ 
                "rkTextLine2], [MarkTextLine3]) VALUES (@LotNo, @Package, @Device, @MarkTextLine1"& _ 
                ", @MarkTextLine2, @MarkTextLine3);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT LotNo, Package, Device, MarkTextLine1"& _ 
                ", MarkTextLine2, MarkTextLine3 FROM TransactionData WHERE (LotNo = @LotNo)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Package", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Package", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Device", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Device", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MarkTextLine1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkTextLine1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MarkTextLine2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkTextLine2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MarkTextLine3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkTextLine3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [TransactionData] SET [LotNo] = @LotNo, [Package] = @Package, [Device] = @"& _ 
                "Device, [MarkTextLine1] = @MarkTextLine1, [MarkTextLine2] = @MarkTextLine2, [Mar"& _ 
                "kTextLine3] = @MarkTextLine3 WHERE (([LotNo] = @Original_LotNo) AND ((@IsNull_Pa"& _ 
                "ckage = 1 AND [Package] IS NULL) OR ([Package] = @Original_Package)) AND ((@IsNu"& _ 
                "ll_Device = 1 AND [Device] IS NULL) OR ([Device] = @Original_Device)) AND ((@IsN"& _ 
                "ull_MarkTextLine1 = 1 AND [MarkTextLine1] IS NULL) OR ([MarkTextLine1] = @Origin"& _ 
                "al_MarkTextLine1)) AND ((@IsNull_MarkTextLine2 = 1 AND [MarkTextLine2] IS NULL) "& _ 
                "OR ([MarkTextLine2] = @Original_MarkTextLine2)) AND ((@IsNull_MarkTextLine3 = 1 "& _ 
                "AND [MarkTextLine3] IS NULL) OR ([MarkTextLine3] = @Original_MarkTextLine3)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "SELECT LotNo, Package, Device, MarkTextLine1, MarkTextLine2, MarkTextLine3 FROM "& _ 
                "TransactionData WHERE (LotNo = @LotNo)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Package", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Package", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Device", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Device", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MarkTextLine1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkTextLine1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MarkTextLine2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkTextLine2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MarkTextLine3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkTextLine3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Package", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Package", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Package", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Package", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Device", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Device", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Device", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Device", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MarkTextLine1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkTextLine1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MarkTextLine1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkTextLine1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MarkTextLine2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkTextLine2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MarkTextLine2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkTextLine2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MarkTextLine3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkTextLine3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MarkTextLine3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkTextLine3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.MAP_Dicer.My.MySettings.Default.DBxConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT                      LotNo, Package, Device, MarkTextLine1, MarkTextLine2,"& _ 
                " MarkTextLine3"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM                         TransactionData"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE             "& _ 
                "          (LotNo = @Lotno)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Lotno", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DBxDataSet.TransactionDataDataTable, ByVal Lotno As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Lotno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Lotno")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Lotno,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Lotno As String) As DBxDataSet.TransactionDataDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Lotno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Lotno")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Lotno,String)
            End If
            Dim dataTable As DBxDataSet.TransactionDataDataTable = New DBxDataSet.TransactionDataDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DBxDataSet.TransactionDataDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DBxDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "TransactionData")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_LotNo As String, ByVal Original_Package As String, ByVal Original_Device As String, ByVal Original_MarkTextLine1 As String, ByVal Original_MarkTextLine2 As String, ByVal Original_MarkTextLine3 As String) As Integer
            If (Original_LotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LotNo")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_LotNo,String)
            End If
            If (Original_Package Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Package,String)
            End If
            If (Original_Device Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Device,String)
            End If
            If (Original_MarkTextLine1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_MarkTextLine1,String)
            End If
            If (Original_MarkTextLine2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_MarkTextLine2,String)
            End If
            If (Original_MarkTextLine3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_MarkTextLine3,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal LotNo As String, ByVal Package As String, ByVal Device As String, ByVal MarkTextLine1 As String, ByVal MarkTextLine2 As String, ByVal MarkTextLine3 As String) As Integer
            If (LotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LotNo")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(LotNo,String)
            End If
            If (Package Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Package,String)
            End If
            If (Device Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Device,String)
            End If
            If (MarkTextLine1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(MarkTextLine1,String)
            End If
            If (MarkTextLine2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(MarkTextLine2,String)
            End If
            If (MarkTextLine3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(MarkTextLine3,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal LotNo As String, ByVal Package As String, ByVal Device As String, ByVal MarkTextLine1 As String, ByVal MarkTextLine2 As String, ByVal MarkTextLine3 As String, ByVal Original_LotNo As String, ByVal Original_Package As String, ByVal Original_Device As String, ByVal Original_MarkTextLine1 As String, ByVal Original_MarkTextLine2 As String, ByVal Original_MarkTextLine3 As String) As Integer
            If (LotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LotNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(LotNo,String)
            End If
            If (Package Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Package,String)
            End If
            If (Device Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Device,String)
            End If
            If (MarkTextLine1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(MarkTextLine1,String)
            End If
            If (MarkTextLine2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(MarkTextLine2,String)
            End If
            If (MarkTextLine3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(MarkTextLine3,String)
            End If
            If (Original_LotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LotNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_LotNo,String)
            End If
            If (Original_Package Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_Package,String)
            End If
            If (Original_Device Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Device,String)
            End If
            If (Original_MarkTextLine1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_MarkTextLine1,String)
            End If
            If (Original_MarkTextLine2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_MarkTextLine2,String)
            End If
            If (Original_MarkTextLine3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_MarkTextLine3,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Package As String, ByVal Device As String, ByVal MarkTextLine1 As String, ByVal MarkTextLine2 As String, ByVal MarkTextLine3 As String, ByVal Original_LotNo As String, ByVal Original_Package As String, ByVal Original_Device As String, ByVal Original_MarkTextLine1 As String, ByVal Original_MarkTextLine2 As String, ByVal Original_MarkTextLine3 As String) As Integer
            Return Me.Update(Original_LotNo, Package, Device, MarkTextLine1, MarkTextLine2, MarkTextLine3, Original_LotNo, Original_Package, Original_Device, Original_MarkTextLine1, Original_MarkTextLine2, Original_MarkTextLine3)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MAPPKGDCDataTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MAPPKGDCData"
            tableMapping.ColumnMappings.Add("MCNo", "MCNo")
            tableMapping.ColumnMappings.Add("LotNo", "LotNo")
            tableMapping.ColumnMappings.Add("LotStartTime", "LotStartTime")
            tableMapping.ColumnMappings.Add("LotEndTime", "LotEndTime")
            tableMapping.ColumnMappings.Add("OPNo", "OPNo")
            tableMapping.ColumnMappings.Add("InputQty", "InputQty")
            tableMapping.ColumnMappings.Add("TotalGood", "TotalGood")
            tableMapping.ColumnMappings.Add("TotalNG", "TotalNG")
            tableMapping.ColumnMappings.Add("CutSpeed", "CutSpeed")
            tableMapping.ColumnMappings.Add("TableCheck", "TableCheck")
            tableMapping.ColumnMappings.Add("Z1KerfWidthBe", "Z1KerfWidthBe")
            tableMapping.ColumnMappings.Add("Z1KerfWidthAct", "Z1KerfWidthAct")
            tableMapping.ColumnMappings.Add("Z1KerfWidthAf", "Z1KerfWidthAf")
            tableMapping.ColumnMappings.Add("Z1CuttingPosBe", "Z1CuttingPosBe")
            tableMapping.ColumnMappings.Add("Z1CuttingPosAct", "Z1CuttingPosAct")
            tableMapping.ColumnMappings.Add("Z1CuttingPosAf", "Z1CuttingPosAf")
            tableMapping.ColumnMappings.Add("Z1ChippingBe", "Z1ChippingBe")
            tableMapping.ColumnMappings.Add("Z1ChippingAct", "Z1ChippingAct")
            tableMapping.ColumnMappings.Add("Z1ChippingAf", "Z1ChippingAf")
            tableMapping.ColumnMappings.Add("Z2KerfWidthBe", "Z2KerfWidthBe")
            tableMapping.ColumnMappings.Add("Z2KerfWidthAct", "Z2KerfWidthAct")
            tableMapping.ColumnMappings.Add("Z2KerfWidthAf", "Z2KerfWidthAf")
            tableMapping.ColumnMappings.Add("Z2CuttingPosBe", "Z2CuttingPosBe")
            tableMapping.ColumnMappings.Add("Z2CuttingPosAct", "Z2CuttingPosAct")
            tableMapping.ColumnMappings.Add("Z2CuttingPosAf", "Z2CuttingPosAf")
            tableMapping.ColumnMappings.Add("Z2ChippingBe", "Z2ChippingBe")
            tableMapping.ColumnMappings.Add("Z2ChippingAct", "Z2ChippingAct")
            tableMapping.ColumnMappings.Add("Z2ChippingAf", "Z2ChippingAf")
            tableMapping.ColumnMappings.Add("PKGBurrBe", "PKGBurrBe")
            tableMapping.ColumnMappings.Add("PKGBurrAf", "PKGBurrAf")
            tableMapping.ColumnMappings.Add("MeltPlateBe", "MeltPlateBe")
            tableMapping.ColumnMappings.Add("MeltPlateAf", "MeltPlateAf")
            tableMapping.ColumnMappings.Add("CrackChippingBe", "CrackChippingBe")
            tableMapping.ColumnMappings.Add("CrackChippingAf", "CrackChippingAf")
            tableMapping.ColumnMappings.Add("CutDepthBe", "CutDepthBe")
            tableMapping.ColumnMappings.Add("CutDepthAf", "CutDepthAf")
            tableMapping.ColumnMappings.Add("Z1BladeAmonthWear", "Z1BladeAmonthWear")
            tableMapping.ColumnMappings.Add("Z2BladeAmonthWear", "Z2BladeAmonthWear")
            tableMapping.ColumnMappings.Add("Z1BladeChange", "Z1BladeChange")
            tableMapping.ColumnMappings.Add("Z2BladeChange", "Z2BladeChange")
            tableMapping.ColumnMappings.Add("Z1BladeCarlibation", "Z1BladeCarlibation")
            tableMapping.ColumnMappings.Add("Z2BladeCarlibation", "Z2BladeCarlibation")
            tableMapping.ColumnMappings.Add("AlmNotFoundMacroTargQty", "AlmNotFoundMacroTargQty")
            tableMapping.ColumnMappings.Add("AlmNotFoundMicroTargQty", "AlmNotFoundMicroTargQty")
            tableMapping.ColumnMappings.Add("AlmLeastSqareApproxQty", "AlmLeastSqareApproxQty")
            tableMapping.ColumnMappings.Add("AlmNonContSetupCheckQty", "AlmNonContSetupCheckQty")
            tableMapping.ColumnMappings.Add("AlmNonContSetupReppErrQty", "AlmNonContSetupReppErrQty")
            tableMapping.ColumnMappings.Add("AlmBladeWearErrQty", "AlmBladeWearErrQty")
            tableMapping.ColumnMappings.Add("AlmBladeExposLimitQty", "AlmBladeExposLimitQty")
            tableMapping.ColumnMappings.Add("AlmCutWaferFlowLowLimitQty", "AlmCutWaferFlowLowLimitQty")
            tableMapping.ColumnMappings.Add("Andon", "Andon")
            tableMapping.ColumnMappings.Add("OPJudgement", "OPJudgement")
            tableMapping.ColumnMappings.Add("LotJudgement", "LotJudgement")
            tableMapping.ColumnMappings.Add("SelfConVersion", "SelfConVersion")
            tableMapping.ColumnMappings.Add("NetVersion", "NetVersion")
            tableMapping.ColumnMappings.Add("GLCheck", "GLCheck")
            tableMapping.ColumnMappings.Add("Remark", "Remark")
            tableMapping.ColumnMappings.Add("Z1BladeType", "Z1BladeType")
            tableMapping.ColumnMappings.Add("Z2BladeType", "Z2BladeType")
            tableMapping.ColumnMappings.Add("Z1BladeLotNo", "Z1BladeLotNo")
            tableMapping.ColumnMappings.Add("Z2BladeLotNo", "Z2BladeLotNo")
            tableMapping.ColumnMappings.Add("LeadZingScratchBe", "LeadZingScratchBe")
            tableMapping.ColumnMappings.Add("LeadZingScratchAf", "LeadZingScratchAf")
            tableMapping.ColumnMappings.Add("MakerQty", "MakerQty")
            tableMapping.ColumnMappings.Add("ICOffQty", "ICOffQty")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [MAPPKGDCData] WHERE (([MCNo] = @Original_MCNo) AND ([LotNo] = @Origi"& _ 
                "nal_LotNo) AND ([LotStartTime] = @Original_LotStartTime) AND ((@IsNull_LotEndTim"& _ 
                "e = 1 AND [LotEndTime] IS NULL) OR ([LotEndTime] = @Original_LotEndTime)) AND (("& _ 
                "@IsNull_OPNo = 1 AND [OPNo] IS NULL) OR ([OPNo] = @Original_OPNo)) AND ((@IsNull"& _ 
                "_InputQty = 1 AND [InputQty] IS NULL) OR ([InputQty] = @Original_InputQty)) AND "& _ 
                "((@IsNull_TotalGood = 1 AND [TotalGood] IS NULL) OR ([TotalGood] = @Original_Tot"& _ 
                "alGood)) AND ((@IsNull_TotalNG = 1 AND [TotalNG] IS NULL) OR ([TotalNG] = @Origi"& _ 
                "nal_TotalNG)) AND ((@IsNull_CutSpeed = 1 AND [CutSpeed] IS NULL) OR ([CutSpeed] "& _ 
                "= @Original_CutSpeed)) AND ((@IsNull_TableCheck = 1 AND [TableCheck] IS NULL) OR"& _ 
                " ([TableCheck] = @Original_TableCheck)) AND ((@IsNull_Z1KerfWidthBe = 1 AND [Z1K"& _ 
                "erfWidthBe] IS NULL) OR ([Z1KerfWidthBe] = @Original_Z1KerfWidthBe)) AND ((@IsNu"& _ 
                "ll_Z1KerfWidthAct = 1 AND [Z1KerfWidthAct] IS NULL) OR ([Z1KerfWidthAct] = @Orig"& _ 
                "inal_Z1KerfWidthAct)) AND ((@IsNull_Z1KerfWidthAf = 1 AND [Z1KerfWidthAf] IS NUL"& _ 
                "L) OR ([Z1KerfWidthAf] = @Original_Z1KerfWidthAf)) AND ((@IsNull_Z1CuttingPosBe "& _ 
                "= 1 AND [Z1CuttingPosBe] IS NULL) OR ([Z1CuttingPosBe] = @Original_Z1CuttingPosB"& _ 
                "e)) AND ((@IsNull_Z1CuttingPosAct = 1 AND [Z1CuttingPosAct] IS NULL) OR ([Z1Cutt"& _ 
                "ingPosAct] = @Original_Z1CuttingPosAct)) AND ((@IsNull_Z1CuttingPosAf = 1 AND [Z"& _ 
                "1CuttingPosAf] IS NULL) OR ([Z1CuttingPosAf] = @Original_Z1CuttingPosAf)) AND (("& _ 
                "@IsNull_Z1ChippingBe = 1 AND [Z1ChippingBe] IS NULL) OR ([Z1ChippingBe] = @Origi"& _ 
                "nal_Z1ChippingBe)) AND ((@IsNull_Z1ChippingAct = 1 AND [Z1ChippingAct] IS NULL) "& _ 
                "OR ([Z1ChippingAct] = @Original_Z1ChippingAct)) AND ((@IsNull_Z1ChippingAf = 1 A"& _ 
                "ND [Z1ChippingAf] IS NULL) OR ([Z1ChippingAf] = @Original_Z1ChippingAf)) AND ((@"& _ 
                "IsNull_Z2KerfWidthBe = 1 AND [Z2KerfWidthBe] IS NULL) OR ([Z2KerfWidthBe] = @Ori"& _ 
                "ginal_Z2KerfWidthBe)) AND ((@IsNull_Z2KerfWidthAct = 1 AND [Z2KerfWidthAct] IS N"& _ 
                "ULL) OR ([Z2KerfWidthAct] = @Original_Z2KerfWidthAct)) AND ((@IsNull_Z2KerfWidth"& _ 
                "Af = 1 AND [Z2KerfWidthAf] IS NULL) OR ([Z2KerfWidthAf] = @Original_Z2KerfWidthA"& _ 
                "f)) AND ((@IsNull_Z2CuttingPosBe = 1 AND [Z2CuttingPosBe] IS NULL) OR ([Z2Cuttin"& _ 
                "gPosBe] = @Original_Z2CuttingPosBe)) AND ((@IsNull_Z2CuttingPosAct = 1 AND [Z2Cu"& _ 
                "ttingPosAct] IS NULL) OR ([Z2CuttingPosAct] = @Original_Z2CuttingPosAct)) AND (("& _ 
                "@IsNull_Z2CuttingPosAf = 1 AND [Z2CuttingPosAf] IS NULL) OR ([Z2CuttingPosAf] = "& _ 
                "@Original_Z2CuttingPosAf)) AND ((@IsNull_Z2ChippingBe = 1 AND [Z2ChippingBe] IS "& _ 
                "NULL) OR ([Z2ChippingBe] = @Original_Z2ChippingBe)) AND ((@IsNull_Z2ChippingAct "& _ 
                "= 1 AND [Z2ChippingAct] IS NULL) OR ([Z2ChippingAct] = @Original_Z2ChippingAct))"& _ 
                " AND ((@IsNull_Z2ChippingAf = 1 AND [Z2ChippingAf] IS NULL) OR ([Z2ChippingAf] ="& _ 
                " @Original_Z2ChippingAf)) AND ((@IsNull_PKGBurrBe = 1 AND [PKGBurrBe] IS NULL) O"& _ 
                "R ([PKGBurrBe] = @Original_PKGBurrBe)) AND ((@IsNull_PKGBurrAf = 1 AND [PKGBurrA"& _ 
                "f] IS NULL) OR ([PKGBurrAf] = @Original_PKGBurrAf)) AND ((@IsNull_MeltPlateBe = "& _ 
                "1 AND [MeltPlateBe] IS NULL) OR ([MeltPlateBe] = @Original_MeltPlateBe)) AND ((@"& _ 
                "IsNull_MeltPlateAf = 1 AND [MeltPlateAf] IS NULL) OR ([MeltPlateAf] = @Original_"& _ 
                "MeltPlateAf)) AND ((@IsNull_CrackChippingBe = 1 AND [CrackChippingBe] IS NULL) O"& _ 
                "R ([CrackChippingBe] = @Original_CrackChippingBe)) AND ((@IsNull_CrackChippingAf"& _ 
                " = 1 AND [CrackChippingAf] IS NULL) OR ([CrackChippingAf] = @Original_CrackChipp"& _ 
                "ingAf)) AND ((@IsNull_CutDepthBe = 1 AND [CutDepthBe] IS NULL) OR ([CutDepthBe] "& _ 
                "= @Original_CutDepthBe)) AND ((@IsNull_CutDepthAf = 1 AND [CutDepthAf] IS NULL) "& _ 
                "OR ([CutDepthAf] = @Original_CutDepthAf)) AND ((@IsNull_Z1BladeAmonthWear = 1 AN"& _ 
                "D [Z1BladeAmonthWear] IS NULL) OR ([Z1BladeAmonthWear] = @Original_Z1BladeAmonth"& _ 
                "Wear)) AND ((@IsNull_Z2BladeAmonthWear = 1 AND [Z2BladeAmonthWear] IS NULL) OR ("& _ 
                "[Z2BladeAmonthWear] = @Original_Z2BladeAmonthWear)) AND ((@IsNull_Z1BladeChange "& _ 
                "= 1 AND [Z1BladeChange] IS NULL) OR ([Z1BladeChange] = @Original_Z1BladeChange))"& _ 
                " AND ((@IsNull_Z2BladeChange = 1 AND [Z2BladeChange] IS NULL) OR ([Z2BladeChange"& _ 
                "] = @Original_Z2BladeChange)) AND ((@IsNull_Z1BladeCarlibation = 1 AND [Z1BladeC"& _ 
                "arlibation] IS NULL) OR ([Z1BladeCarlibation] = @Original_Z1BladeCarlibation)) A"& _ 
                "ND ((@IsNull_Z2BladeCarlibation = 1 AND [Z2BladeCarlibation] IS NULL) OR ([Z2Bla"& _ 
                "deCarlibation] = @Original_Z2BladeCarlibation)) AND ((@IsNull_AlmNotFoundMacroTa"& _ 
                "rgQty = 1 AND [AlmNotFoundMacroTargQty] IS NULL) OR ([AlmNotFoundMacroTargQty] ="& _ 
                " @Original_AlmNotFoundMacroTargQty)) AND ((@IsNull_AlmNotFoundMicroTargQty = 1 A"& _ 
                "ND [AlmNotFoundMicroTargQty] IS NULL) OR ([AlmNotFoundMicroTargQty] = @Original_"& _ 
                "AlmNotFoundMicroTargQty)) AND ((@IsNull_AlmLeastSqareApproxQty = 1 AND [AlmLeast"& _ 
                "SqareApproxQty] IS NULL) OR ([AlmLeastSqareApproxQty] = @Original_AlmLeastSqareA"& _ 
                "pproxQty)) AND ((@IsNull_AlmNonContSetupCheckQty = 1 AND [AlmNonContSetupCheckQt"& _ 
                "y] IS NULL) OR ([AlmNonContSetupCheckQty] = @Original_AlmNonContSetupCheckQty)) "& _ 
                "AND ((@IsNull_AlmNonContSetupReppErrQty = 1 AND [AlmNonContSetupReppErrQty] IS N"& _ 
                "ULL) OR ([AlmNonContSetupReppErrQty] = @Original_AlmNonContSetupReppErrQty)) AND"& _ 
                " ((@IsNull_AlmBladeWearErrQty = 1 AND [AlmBladeWearErrQty] IS NULL) OR ([AlmBlad"& _ 
                "eWearErrQty] = @Original_AlmBladeWearErrQty)) AND ((@IsNull_AlmBladeExposLimitQt"& _ 
                "y = 1 AND [AlmBladeExposLimitQty] IS NULL) OR ([AlmBladeExposLimitQty] = @Origin"& _ 
                "al_AlmBladeExposLimitQty)) AND ((@IsNull_AlmCutWaferFlowLowLimitQty = 1 AND [Alm"& _ 
                "CutWaferFlowLowLimitQty] IS NULL) OR ([AlmCutWaferFlowLowLimitQty] = @Original_A"& _ 
                "lmCutWaferFlowLowLimitQty)) AND ((@IsNull_Andon = 1 AND [Andon] IS NULL) OR ([An"& _ 
                "don] = @Original_Andon)) AND ((@IsNull_GLCheck = 1 AND [GLCheck] IS NULL) OR ([G"& _ 
                "LCheck] = @Original_GLCheck)) AND ((@IsNull_LotJudgement = 1 AND [LotJudgement] "& _ 
                "IS NULL) OR ([LotJudgement] = @Original_LotJudgement)) AND ((@IsNull_NetVersion "& _ 
                "= 1 AND [NetVersion] IS NULL) OR ([NetVersion] = @Original_NetVersion)) AND ((@I"& _ 
                "sNull_OPJudgement = 1 AND [OPJudgement] IS NULL) OR ([OPJudgement] = @Original_O"& _ 
                "PJudgement)) AND ((@IsNull_Remark = 1 AND [Remark] IS NULL) OR ([Remark] = @Orig"& _ 
                "inal_Remark)) AND ((@IsNull_SelfConVersion = 1 AND [SelfConVersion] IS NULL) OR "& _ 
                "([SelfConVersion] = @Original_SelfConVersion)) AND ((@IsNull_LeadZingScratchAf ="& _ 
                " 1 AND [LeadZingScratchAf] IS NULL) OR ([LeadZingScratchAf] = @Original_LeadZing"& _ 
                "ScratchAf)) AND ((@IsNull_LeadZingScratchBe = 1 AND [LeadZingScratchBe] IS NULL)"& _ 
                " OR ([LeadZingScratchBe] = @Original_LeadZingScratchBe)) AND ((@IsNull_Z1BladeLo"& _ 
                "tNo = 1 AND [Z1BladeLotNo] IS NULL) OR ([Z1BladeLotNo] = @Original_Z1BladeLotNo)"& _ 
                ") AND ((@IsNull_Z1BladeType = 1 AND [Z1BladeType] IS NULL) OR ([Z1BladeType] = @"& _ 
                "Original_Z1BladeType)) AND ((@IsNull_Z2BladeLotNo = 1 AND [Z2BladeLotNo] IS NULL"& _ 
                ") OR ([Z2BladeLotNo] = @Original_Z2BladeLotNo)) AND ((@IsNull_Z2BladeType = 1 AN"& _ 
                "D [Z2BladeType] IS NULL) OR ([Z2BladeType] = @Original_Z2BladeType)) AND ((@IsNu"& _ 
                "ll_ICOffQty = 1 AND [ICOffQty] IS NULL) OR ([ICOffQty] = @Original_ICOffQty)) AN"& _ 
                "D ((@IsNull_MakerQty = 1 AND [MakerQty] IS NULL) OR ([MakerQty] = @Original_Make"& _ 
                "rQty)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MCNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotStartTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotStartTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LotEndTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotEndTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotEndTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotEndTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OPNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_InputQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InputQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_InputQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InputQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TotalGood", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalGood", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TotalGood", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalGood", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TotalNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TotalNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CutSpeed", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CutSpeed", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CutSpeed", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CutSpeed", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TableCheck", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TableCheck", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TableCheck", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TableCheck", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z1KerfWidthBe", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1KerfWidthBe", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z1KerfWidthBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1KerfWidthBe", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z1KerfWidthAct", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1KerfWidthAct", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z1KerfWidthAct", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1KerfWidthAct", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z1KerfWidthAf", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1KerfWidthAf", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z1KerfWidthAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1KerfWidthAf", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z1CuttingPosBe", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1CuttingPosBe", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z1CuttingPosBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1CuttingPosBe", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z1CuttingPosAct", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1CuttingPosAct", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z1CuttingPosAct", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1CuttingPosAct", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z1CuttingPosAf", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1CuttingPosAf", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z1CuttingPosAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1CuttingPosAf", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z1ChippingBe", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1ChippingBe", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z1ChippingBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1ChippingBe", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z1ChippingAct", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1ChippingAct", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z1ChippingAct", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1ChippingAct", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z1ChippingAf", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1ChippingAf", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z1ChippingAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1ChippingAf", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z2KerfWidthBe", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2KerfWidthBe", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z2KerfWidthBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2KerfWidthBe", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z2KerfWidthAct", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2KerfWidthAct", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z2KerfWidthAct", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2KerfWidthAct", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z2KerfWidthAf", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2KerfWidthAf", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z2KerfWidthAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2KerfWidthAf", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z2CuttingPosBe", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2CuttingPosBe", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z2CuttingPosBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2CuttingPosBe", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z2CuttingPosAct", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2CuttingPosAct", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z2CuttingPosAct", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2CuttingPosAct", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z2CuttingPosAf", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2CuttingPosAf", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z2CuttingPosAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2CuttingPosAf", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z2ChippingBe", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2ChippingBe", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z2ChippingBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2ChippingBe", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z2ChippingAct", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2ChippingAct", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z2ChippingAct", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2ChippingAct", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z2ChippingAf", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2ChippingAf", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z2ChippingAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2ChippingAf", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PKGBurrBe", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PKGBurrBe", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PKGBurrBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PKGBurrBe", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PKGBurrAf", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PKGBurrAf", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PKGBurrAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PKGBurrAf", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MeltPlateBe", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeltPlateBe", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MeltPlateBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeltPlateBe", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MeltPlateAf", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeltPlateAf", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MeltPlateAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeltPlateAf", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CrackChippingBe", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CrackChippingBe", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CrackChippingBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CrackChippingBe", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CrackChippingAf", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CrackChippingAf", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CrackChippingAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CrackChippingAf", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CutDepthBe", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CutDepthBe", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CutDepthBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CutDepthBe", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CutDepthAf", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CutDepthAf", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CutDepthAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CutDepthAf", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z1BladeAmonthWear", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1BladeAmonthWear", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z1BladeAmonthWear", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1BladeAmonthWear", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z2BladeAmonthWear", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2BladeAmonthWear", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z2BladeAmonthWear", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2BladeAmonthWear", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z1BladeChange", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1BladeChange", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z1BladeChange", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1BladeChange", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z2BladeChange", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2BladeChange", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z2BladeChange", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2BladeChange", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z1BladeCarlibation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1BladeCarlibation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z1BladeCarlibation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1BladeCarlibation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z2BladeCarlibation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2BladeCarlibation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z2BladeCarlibation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2BladeCarlibation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AlmNotFoundMacroTargQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmNotFoundMacroTargQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AlmNotFoundMacroTargQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmNotFoundMacroTargQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AlmNotFoundMicroTargQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmNotFoundMicroTargQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AlmNotFoundMicroTargQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmNotFoundMicroTargQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AlmLeastSqareApproxQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmLeastSqareApproxQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AlmLeastSqareApproxQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmLeastSqareApproxQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AlmNonContSetupCheckQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmNonContSetupCheckQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AlmNonContSetupCheckQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmNonContSetupCheckQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AlmNonContSetupReppErrQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmNonContSetupReppErrQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AlmNonContSetupReppErrQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmNonContSetupReppErrQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AlmBladeWearErrQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmBladeWearErrQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AlmBladeWearErrQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmBladeWearErrQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AlmBladeExposLimitQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmBladeExposLimitQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AlmBladeExposLimitQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmBladeExposLimitQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AlmCutWaferFlowLowLimitQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmCutWaferFlowLowLimitQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AlmCutWaferFlowLowLimitQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmCutWaferFlowLowLimitQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Andon", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Andon", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Andon", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Andon", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GLCheck", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GLCheck", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GLCheck", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GLCheck", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LotJudgement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotJudgement", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotJudgement", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotJudgement", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NetVersion", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NetVersion", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NetVersion", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NetVersion", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OPJudgement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPJudgement", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPJudgement", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPJudgement", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remark", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remark", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remark", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remark", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SelfConVersion", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SelfConVersion", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SelfConVersion", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SelfConVersion", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LeadZingScratchAf", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LeadZingScratchAf", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LeadZingScratchAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LeadZingScratchAf", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LeadZingScratchBe", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LeadZingScratchBe", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LeadZingScratchBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LeadZingScratchBe", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z1BladeLotNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1BladeLotNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z1BladeLotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1BladeLotNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z1BladeType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1BladeType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z1BladeType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1BladeType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z2BladeLotNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2BladeLotNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z2BladeLotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2BladeLotNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z2BladeType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2BladeType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z2BladeType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2BladeType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ICOffQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICOffQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICOffQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICOffQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MakerQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MakerQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MakerQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MakerQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [MAPPKGDCData] ([MCNo], [LotNo], [LotStartTime], [LotEndTime], [OPNo]"& _ 
                ", [InputQty], [TotalGood], [TotalNG], [CutSpeed], [TableCheck], [Z1KerfWidthBe],"& _ 
                " [Z1KerfWidthAct], [Z1KerfWidthAf], [Z1CuttingPosBe], [Z1CuttingPosAct], [Z1Cutt"& _ 
                "ingPosAf], [Z1ChippingBe], [Z1ChippingAct], [Z1ChippingAf], [Z2KerfWidthBe], [Z2"& _ 
                "KerfWidthAct], [Z2KerfWidthAf], [Z2CuttingPosBe], [Z2CuttingPosAct], [Z2CuttingP"& _ 
                "osAf], [Z2ChippingBe], [Z2ChippingAct], [Z2ChippingAf], [PKGBurrBe], [PKGBurrAf]"& _ 
                ", [MeltPlateBe], [MeltPlateAf], [CrackChippingBe], [CrackChippingAf], [CutDepthB"& _ 
                "e], [CutDepthAf], [Z1BladeAmonthWear], [Z2BladeAmonthWear], [Z1BladeChange], [Z2"& _ 
                "BladeChange], [Z1BladeCarlibation], [Z2BladeCarlibation], [AlmNotFoundMacroTargQ"& _ 
                "ty], [AlmNotFoundMicroTargQty], [AlmLeastSqareApproxQty], [AlmNonContSetupCheckQ"& _ 
                "ty], [AlmNonContSetupReppErrQty], [AlmBladeWearErrQty], [AlmBladeExposLimitQty],"& _ 
                " [AlmCutWaferFlowLowLimitQty], [Andon], [GLCheck], [LotJudgement], [NetVersion],"& _ 
                " [OPJudgement], [Remark], [SelfConVersion], [LeadZingScratchAf], [LeadZingScratc"& _ 
                "hBe], [Z1BladeLotNo], [Z1BladeType], [Z2BladeLotNo], [Z2BladeType], [ICOffQty], "& _ 
                "[MakerQty]) VALUES (@MCNo, @LotNo, @LotStartTime, @LotEndTime, @OPNo, @InputQty,"& _ 
                " @TotalGood, @TotalNG, @CutSpeed, @TableCheck, @Z1KerfWidthBe, @Z1KerfWidthAct, "& _ 
                "@Z1KerfWidthAf, @Z1CuttingPosBe, @Z1CuttingPosAct, @Z1CuttingPosAf, @Z1ChippingB"& _ 
                "e, @Z1ChippingAct, @Z1ChippingAf, @Z2KerfWidthBe, @Z2KerfWidthAct, @Z2KerfWidthA"& _ 
                "f, @Z2CuttingPosBe, @Z2CuttingPosAct, @Z2CuttingPosAf, @Z2ChippingBe, @Z2Chippin"& _ 
                "gAct, @Z2ChippingAf, @PKGBurrBe, @PKGBurrAf, @MeltPlateBe, @MeltPlateAf, @CrackC"& _ 
                "hippingBe, @CrackChippingAf, @CutDepthBe, @CutDepthAf, @Z1BladeAmonthWear, @Z2Bl"& _ 
                "adeAmonthWear, @Z1BladeChange, @Z2BladeChange, @Z1BladeCarlibation, @Z2BladeCarl"& _ 
                "ibation, @AlmNotFoundMacroTargQty, @AlmNotFoundMicroTargQty, @AlmLeastSqareAppro"& _ 
                "xQty, @AlmNonContSetupCheckQty, @AlmNonContSetupReppErrQty, @AlmBladeWearErrQty,"& _ 
                " @AlmBladeExposLimitQty, @AlmCutWaferFlowLowLimitQty, @Andon, @GLCheck, @LotJudg"& _ 
                "ement, @NetVersion, @OPJudgement, @Remark, @SelfConVersion, @LeadZingScratchAf, "& _ 
                "@LeadZingScratchBe, @Z1BladeLotNo, @Z1BladeType, @Z2BladeLotNo, @Z2BladeType, @I"& _ 
                "COffQty, @MakerQty);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MCNo, LotNo, LotStartTime, LotEndTime, OPNo, InputQ"& _ 
                "ty, TotalGood, TotalNG, CutSpeed, TableCheck, Z1KerfWidthBe, Z1KerfWidthAct, Z1K"& _ 
                "erfWidthAf, Z1CuttingPosBe, Z1CuttingPosAct, Z1CuttingPosAf, Z1ChippingBe, Z1Chi"& _ 
                "ppingAct, Z1ChippingAf, Z2KerfWidthBe, Z2KerfWidthAct, Z2KerfWidthAf, Z2CuttingP"& _ 
                "osBe, Z2CuttingPosAct, Z2CuttingPosAf, Z2ChippingBe, Z2ChippingAct, Z2ChippingAf"& _ 
                ", PKGBurrBe, PKGBurrAf, MeltPlateBe, MeltPlateAf, CrackChippingBe, CrackChipping"& _ 
                "Af, CutDepthBe, CutDepthAf, Z1BladeAmonthWear, Z2BladeAmonthWear, Z1BladeChange,"& _ 
                " Z2BladeChange, Z1BladeCarlibation, Z2BladeCarlibation, AlmNotFoundMacroTargQty,"& _ 
                " AlmNotFoundMicroTargQty, AlmLeastSqareApproxQty, AlmNonContSetupCheckQty, AlmNo"& _ 
                "nContSetupReppErrQty, AlmBladeWearErrQty, AlmBladeExposLimitQty, AlmCutWaferFlow"& _ 
                "LowLimitQty, Andon, GLCheck, LotJudgement, NetVersion, OPJudgement, Remark, Self"& _ 
                "ConVersion, LeadZingScratchAf, LeadZingScratchBe, Z1BladeLotNo, Z1BladeType, Z2B"& _ 
                "ladeLotNo, Z2BladeType, ICOffQty, MakerQty FROM MAPPKGDCData WHERE (LotNo = @Lot"& _ 
                "No) AND (LotStartTime = @LotStartTime) AND (MCNo = @MCNo)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MCNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotStartTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotStartTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotEndTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotEndTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InputQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InputQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalGood", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalGood", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CutSpeed", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CutSpeed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TableCheck", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TableCheck", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z1KerfWidthBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1KerfWidthBe", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z1KerfWidthAct", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1KerfWidthAct", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z1KerfWidthAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1KerfWidthAf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z1CuttingPosBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1CuttingPosBe", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z1CuttingPosAct", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1CuttingPosAct", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z1CuttingPosAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1CuttingPosAf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z1ChippingBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1ChippingBe", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z1ChippingAct", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1ChippingAct", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z1ChippingAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1ChippingAf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z2KerfWidthBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2KerfWidthBe", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z2KerfWidthAct", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2KerfWidthAct", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z2KerfWidthAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2KerfWidthAf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z2CuttingPosBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2CuttingPosBe", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z2CuttingPosAct", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2CuttingPosAct", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z2CuttingPosAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2CuttingPosAf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z2ChippingBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2ChippingBe", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z2ChippingAct", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2ChippingAct", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z2ChippingAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2ChippingAf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PKGBurrBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PKGBurrBe", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PKGBurrAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PKGBurrAf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MeltPlateBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeltPlateBe", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MeltPlateAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeltPlateAf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CrackChippingBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CrackChippingBe", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CrackChippingAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CrackChippingAf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CutDepthBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CutDepthBe", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CutDepthAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CutDepthAf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z1BladeAmonthWear", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1BladeAmonthWear", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z2BladeAmonthWear", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2BladeAmonthWear", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z1BladeChange", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1BladeChange", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z2BladeChange", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2BladeChange", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z1BladeCarlibation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1BladeCarlibation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z2BladeCarlibation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2BladeCarlibation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AlmNotFoundMacroTargQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmNotFoundMacroTargQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AlmNotFoundMicroTargQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmNotFoundMicroTargQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AlmLeastSqareApproxQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmLeastSqareApproxQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AlmNonContSetupCheckQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmNonContSetupCheckQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AlmNonContSetupReppErrQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmNonContSetupReppErrQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AlmBladeWearErrQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmBladeWearErrQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AlmBladeExposLimitQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmBladeExposLimitQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AlmCutWaferFlowLowLimitQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmCutWaferFlowLowLimitQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Andon", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Andon", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GLCheck", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GLCheck", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotJudgement", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotJudgement", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NetVersion", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NetVersion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPJudgement", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPJudgement", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remark", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remark", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SelfConVersion", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SelfConVersion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LeadZingScratchAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LeadZingScratchAf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LeadZingScratchBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LeadZingScratchBe", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z1BladeLotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1BladeLotNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z1BladeType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1BladeType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z2BladeLotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2BladeLotNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z2BladeType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2BladeType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICOffQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICOffQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MakerQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MakerQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [MAPPKGDCData] SET [MCNo] = @MCNo, [LotNo] = @LotNo, [LotStartTime] = @Lot"& _ 
                "StartTime, [LotEndTime] = @LotEndTime, [OPNo] = @OPNo, [InputQty] = @InputQty, ["& _ 
                "TotalGood] = @TotalGood, [TotalNG] = @TotalNG, [CutSpeed] = @CutSpeed, [TableChe"& _ 
                "ck] = @TableCheck, [Z1KerfWidthBe] = @Z1KerfWidthBe, [Z1KerfWidthAct] = @Z1KerfW"& _ 
                "idthAct, [Z1KerfWidthAf] = @Z1KerfWidthAf, [Z1CuttingPosBe] = @Z1CuttingPosBe, ["& _ 
                "Z1CuttingPosAct] = @Z1CuttingPosAct, [Z1CuttingPosAf] = @Z1CuttingPosAf, [Z1Chip"& _ 
                "pingBe] = @Z1ChippingBe, [Z1ChippingAct] = @Z1ChippingAct, [Z1ChippingAf] = @Z1C"& _ 
                "hippingAf, [Z2KerfWidthBe] = @Z2KerfWidthBe, [Z2KerfWidthAct] = @Z2KerfWidthAct,"& _ 
                " [Z2KerfWidthAf] = @Z2KerfWidthAf, [Z2CuttingPosBe] = @Z2CuttingPosBe, [Z2Cuttin"& _ 
                "gPosAct] = @Z2CuttingPosAct, [Z2CuttingPosAf] = @Z2CuttingPosAf, [Z2ChippingBe] "& _ 
                "= @Z2ChippingBe, [Z2ChippingAct] = @Z2ChippingAct, [Z2ChippingAf] = @Z2ChippingA"& _ 
                "f, [PKGBurrBe] = @PKGBurrBe, [PKGBurrAf] = @PKGBurrAf, [MeltPlateBe] = @MeltPlat"& _ 
                "eBe, [MeltPlateAf] = @MeltPlateAf, [CrackChippingBe] = @CrackChippingBe, [CrackC"& _ 
                "hippingAf] = @CrackChippingAf, [CutDepthBe] = @CutDepthBe, [CutDepthAf] = @CutDe"& _ 
                "pthAf, [Z1BladeAmonthWear] = @Z1BladeAmonthWear, [Z2BladeAmonthWear] = @Z2BladeA"& _ 
                "monthWear, [Z1BladeChange] = @Z1BladeChange, [Z2BladeChange] = @Z2BladeChange, ["& _ 
                "Z1BladeCarlibation] = @Z1BladeCarlibation, [Z2BladeCarlibation] = @Z2BladeCarlib"& _ 
                "ation, [AlmNotFoundMacroTargQty] = @AlmNotFoundMacroTargQty, [AlmNotFoundMicroTa"& _ 
                "rgQty] = @AlmNotFoundMicroTargQty, [AlmLeastSqareApproxQty] = @AlmLeastSqareAppr"& _ 
                "oxQty, [AlmNonContSetupCheckQty] = @AlmNonContSetupCheckQty, [AlmNonContSetupRep"& _ 
                "pErrQty] = @AlmNonContSetupReppErrQty, [AlmBladeWearErrQty] = @AlmBladeWearErrQt"& _ 
                "y, [AlmBladeExposLimitQty] = @AlmBladeExposLimitQty, [AlmCutWaferFlowLowLimitQty"& _ 
                "] = @AlmCutWaferFlowLowLimitQty, [Andon] = @Andon, [GLCheck] = @GLCheck, [LotJud"& _ 
                "gement] = @LotJudgement, [NetVersion] = @NetVersion, [OPJudgement] = @OPJudgemen"& _ 
                "t, [Remark] = @Remark, [SelfConVersion] = @SelfConVersion, [LeadZingScratchAf] ="& _ 
                " @LeadZingScratchAf, [LeadZingScratchBe] = @LeadZingScratchBe, [Z1BladeLotNo] = "& _ 
                "@Z1BladeLotNo, [Z1BladeType] = @Z1BladeType, [Z2BladeLotNo] = @Z2BladeLotNo, [Z2"& _ 
                "BladeType] = @Z2BladeType, [ICOffQty] = @ICOffQty, [MakerQty] = @MakerQty WHERE "& _ 
                "(([MCNo] = @Original_MCNo) AND ([LotNo] = @Original_LotNo) AND ([LotStartTime] ="& _ 
                " @Original_LotStartTime) AND ((@IsNull_LotEndTime = 1 AND [LotEndTime] IS NULL) "& _ 
                "OR ([LotEndTime] = @Original_LotEndTime)) AND ((@IsNull_OPNo = 1 AND [OPNo] IS N"& _ 
                "ULL) OR ([OPNo] = @Original_OPNo)) AND ((@IsNull_InputQty = 1 AND [InputQty] IS "& _ 
                "NULL) OR ([InputQty] = @Original_InputQty)) AND ((@IsNull_TotalGood = 1 AND [Tot"& _ 
                "alGood] IS NULL) OR ([TotalGood] = @Original_TotalGood)) AND ((@IsNull_TotalNG ="& _ 
                " 1 AND [TotalNG] IS NULL) OR ([TotalNG] = @Original_TotalNG)) AND ((@IsNull_CutS"& _ 
                "peed = 1 AND [CutSpeed] IS NULL) OR ([CutSpeed] = @Original_CutSpeed)) AND ((@Is"& _ 
                "Null_TableCheck = 1 AND [TableCheck] IS NULL) OR ([TableCheck] = @Original_Table"& _ 
                "Check)) AND ((@IsNull_Z1KerfWidthBe = 1 AND [Z1KerfWidthBe] IS NULL) OR ([Z1Kerf"& _ 
                "WidthBe] = @Original_Z1KerfWidthBe)) AND ((@IsNull_Z1KerfWidthAct = 1 AND [Z1Ker"& _ 
                "fWidthAct] IS NULL) OR ([Z1KerfWidthAct] = @Original_Z1KerfWidthAct)) AND ((@IsN"& _ 
                "ull_Z1KerfWidthAf = 1 AND [Z1KerfWidthAf] IS NULL) OR ([Z1KerfWidthAf] = @Origin"& _ 
                "al_Z1KerfWidthAf)) AND ((@IsNull_Z1CuttingPosBe = 1 AND [Z1CuttingPosBe] IS NULL"& _ 
                ") OR ([Z1CuttingPosBe] = @Original_Z1CuttingPosBe)) AND ((@IsNull_Z1CuttingPosAc"& _ 
                "t = 1 AND [Z1CuttingPosAct] IS NULL) OR ([Z1CuttingPosAct] = @Original_Z1Cutting"& _ 
                "PosAct)) AND ((@IsNull_Z1CuttingPosAf = 1 AND [Z1CuttingPosAf] IS NULL) OR ([Z1C"& _ 
                "uttingPosAf] = @Original_Z1CuttingPosAf)) AND ((@IsNull_Z1ChippingBe = 1 AND [Z1"& _ 
                "ChippingBe] IS NULL) OR ([Z1ChippingBe] = @Original_Z1ChippingBe)) AND ((@IsNull"& _ 
                "_Z1ChippingAct = 1 AND [Z1ChippingAct] IS NULL) OR ([Z1ChippingAct] = @Original_"& _ 
                "Z1ChippingAct)) AND ((@IsNull_Z1ChippingAf = 1 AND [Z1ChippingAf] IS NULL) OR (["& _ 
                "Z1ChippingAf] = @Original_Z1ChippingAf)) AND ((@IsNull_Z2KerfWidthBe = 1 AND [Z2"& _ 
                "KerfWidthBe] IS NULL) OR ([Z2KerfWidthBe] = @Original_Z2KerfWidthBe)) AND ((@IsN"& _ 
                "ull_Z2KerfWidthAct = 1 AND [Z2KerfWidthAct] IS NULL) OR ([Z2KerfWidthAct] = @Ori"& _ 
                "ginal_Z2KerfWidthAct)) AND ((@IsNull_Z2KerfWidthAf = 1 AND [Z2KerfWidthAf] IS NU"& _ 
                "LL) OR ([Z2KerfWidthAf] = @Original_Z2KerfWidthAf)) AND ((@IsNull_Z2CuttingPosBe"& _ 
                " = 1 AND [Z2CuttingPosBe] IS NULL) OR ([Z2CuttingPosBe] = @Original_Z2CuttingPos"& _ 
                "Be)) AND ((@IsNull_Z2CuttingPosAct = 1 AND [Z2CuttingPosAct] IS NULL) OR ([Z2Cut"& _ 
                "tingPosAct] = @Original_Z2CuttingPosAct)) AND ((@IsNull_Z2CuttingPosAf = 1 AND ["& _ 
                "Z2CuttingPosAf] IS NULL) OR ([Z2CuttingPosAf] = @Original_Z2CuttingPosAf)) AND ("& _ 
                "(@IsNull_Z2ChippingBe = 1 AND [Z2ChippingBe] IS NULL) OR ([Z2ChippingBe] = @Orig"& _ 
                "inal_Z2ChippingBe)) AND ((@IsNull_Z2ChippingAct = 1 AND [Z2ChippingAct] IS NULL)"& _ 
                " OR ([Z2ChippingAct] = @Original_Z2ChippingAct)) AND ((@IsNull_Z2ChippingAf = 1 "& _ 
                "AND [Z2ChippingAf] IS NULL) OR ([Z2ChippingAf] = @Original_Z2ChippingAf)) AND (("& _ 
                "@IsNull_PKGBurrBe = 1 AND [PKGBurrBe] IS NULL) OR ([PKGBurrBe] = @Original_PKGBu"& _ 
                "rrBe)) AND ((@IsNull_PKGBurrAf = 1 AND [PKGBurrAf] IS NULL) OR ([PKGBurrAf] = @O"& _ 
                "riginal_PKGBurrAf)) AND ((@IsNull_MeltPlateBe = 1 AND [MeltPlateBe] IS NULL) OR "& _ 
                "([MeltPlateBe] = @Original_MeltPlateBe)) AND ((@IsNull_MeltPlateAf = 1 AND [Melt"& _ 
                "PlateAf] IS NULL) OR ([MeltPlateAf] = @Original_MeltPlateAf)) AND ((@IsNull_Crac"& _ 
                "kChippingBe = 1 AND [CrackChippingBe] IS NULL) OR ([CrackChippingBe] = @Original"& _ 
                "_CrackChippingBe)) AND ((@IsNull_CrackChippingAf = 1 AND [CrackChippingAf] IS NU"& _ 
                "LL) OR ([CrackChippingAf] = @Original_CrackChippingAf)) AND ((@IsNull_CutDepthBe"& _ 
                " = 1 AND [CutDepthBe] IS NULL) OR ([CutDepthBe] = @Original_CutDepthBe)) AND ((@"& _ 
                "IsNull_CutDepthAf = 1 AND [CutDepthAf] IS NULL) OR ([CutDepthAf] = @Original_Cut"& _ 
                "DepthAf)) AND ((@IsNull_Z1BladeAmonthWear = 1 AND [Z1BladeAmonthWear] IS NULL) O"& _ 
                "R ([Z1BladeAmonthWear] = @Original_Z1BladeAmonthWear)) AND ((@IsNull_Z2BladeAmon"& _ 
                "thWear = 1 AND [Z2BladeAmonthWear] IS NULL) OR ([Z2BladeAmonthWear] = @Original_"& _ 
                "Z2BladeAmonthWear)) AND ((@IsNull_Z1BladeChange = 1 AND [Z1BladeChange] IS NULL)"& _ 
                " OR ([Z1BladeChange] = @Original_Z1BladeChange)) AND ((@IsNull_Z2BladeChange = 1"& _ 
                " AND [Z2BladeChange] IS NULL) OR ([Z2BladeChange] = @Original_Z2BladeChange)) AN"& _ 
                "D ((@IsNull_Z1BladeCarlibation = 1 AND [Z1BladeCarlibation] IS NULL) OR ([Z1Blad"& _ 
                "eCarlibation] = @Original_Z1BladeCarlibation)) AND ((@IsNull_Z2BladeCarlibation "& _ 
                "= 1 AND [Z2BladeCarlibation] IS NULL) OR ([Z2BladeCarlibation] = @Original_Z2Bla"& _ 
                "deCarlibation)) AND ((@IsNull_AlmNotFoundMacroTargQty = 1 AND [AlmNotFoundMacroT"& _ 
                "argQty] IS NULL) OR ([AlmNotFoundMacroTargQty] = @Original_AlmNotFoundMacroTargQ"& _ 
                "ty)) AND ((@IsNull_AlmNotFoundMicroTargQty = 1 AND [AlmNotFoundMicroTargQty] IS "& _ 
                "NULL) OR ([AlmNotFoundMicroTargQty] = @Original_AlmNotFoundMicroTargQty)) AND (("& _ 
                "@IsNull_AlmLeastSqareApproxQty = 1 AND [AlmLeastSqareApproxQty] IS NULL) OR ([Al"& _ 
                "mLeastSqareApproxQty] = @Original_AlmLeastSqareApproxQty)) AND ((@IsNull_AlmNonC"& _ 
                "ontSetupCheckQty = 1 AND [AlmNonContSetupCheckQty] IS NULL) OR ([AlmNonContSetup"& _ 
                "CheckQty] = @Original_AlmNonContSetupCheckQty)) AND ((@IsNull_AlmNonContSetupRep"& _ 
                "pErrQty = 1 AND [AlmNonContSetupReppErrQty] IS NULL) OR ([AlmNonContSetupReppErr"& _ 
                "Qty] = @Original_AlmNonContSetupReppErrQty)) AND ((@IsNull_AlmBladeWearErrQty = "& _ 
                "1 AND [AlmBladeWearErrQty] IS NULL) OR ([AlmBladeWearErrQty] = @Original_AlmBlad"& _ 
                "eWearErrQty)) AND ((@IsNull_AlmBladeExposLimitQty = 1 AND [AlmBladeExposLimitQty"& _ 
                "] IS NULL) OR ([AlmBladeExposLimitQty] = @Original_AlmBladeExposLimitQty)) AND ("& _ 
                "(@IsNull_AlmCutWaferFlowLowLimitQty = 1 AND [AlmCutWaferFlowLowLimitQty] IS NULL"& _ 
                ") OR ([AlmCutWaferFlowLowLimitQty] = @Original_AlmCutWaferFlowLowLimitQty)) AND "& _ 
                "((@IsNull_Andon = 1 AND [Andon] IS NULL) OR ([Andon] = @Original_Andon)) AND ((@"& _ 
                "IsNull_GLCheck = 1 AND [GLCheck] IS NULL) OR ([GLCheck] = @Original_GLCheck)) AN"& _ 
                "D ((@IsNull_LotJudgement = 1 AND [LotJudgement] IS NULL) OR ([LotJudgement] = @O"& _ 
                "riginal_LotJudgement)) AND ((@IsNull_NetVersion = 1 AND [NetVersion] IS NULL) OR"& _ 
                " ([NetVersion] = @Original_NetVersion)) AND ((@IsNull_OPJudgement = 1 AND [OPJud"& _ 
                "gement] IS NULL) OR ([OPJudgement] = @Original_OPJudgement)) AND ((@IsNull_Remar"& _ 
                "k = 1 AND [Remark] IS NULL) OR ([Remark] = @Original_Remark)) AND ((@IsNull_Self"& _ 
                "ConVersion = 1 AND [SelfConVersion] IS NULL) OR ([SelfConVersion] = @Original_Se"& _ 
                "lfConVersion)) AND ((@IsNull_LeadZingScratchAf = 1 AND [LeadZingScratchAf] IS NU"& _ 
                "LL) OR ([LeadZingScratchAf] = @Original_LeadZingScratchAf)) AND ((@IsNull_LeadZi"& _ 
                "ngScratchBe = 1 AND [LeadZingScratchBe] IS NULL) OR ([LeadZingScratchBe] = @Orig"& _ 
                "inal_LeadZingScratchBe)) AND ((@IsNull_Z1BladeLotNo = 1 AND [Z1BladeLotNo] IS NU"& _ 
                "LL) OR ([Z1BladeLotNo] = @Original_Z1BladeLotNo)) AND ((@IsNull_Z1BladeType = 1 "& _ 
                "AND [Z1BladeType] IS NULL) OR ([Z1BladeType] = @Original_Z1BladeType)) AND ((@Is"& _ 
                "Null_Z2BladeLotNo = 1 AND [Z2BladeLotNo] IS NULL) OR ([Z2BladeLotNo] = @Original"& _ 
                "_Z2BladeLotNo)) AND ((@IsNull_Z2BladeType = 1 AND [Z2BladeType] IS NULL) OR ([Z2"& _ 
                "BladeType] = @Original_Z2BladeType)) AND ((@IsNull_ICOffQty = 1 AND [ICOffQty] I"& _ 
                "S NULL) OR ([ICOffQty] = @Original_ICOffQty)) AND ((@IsNull_MakerQty = 1 AND [Ma"& _ 
                "kerQty] IS NULL) OR ([MakerQty] = @Original_MakerQty)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MCNo, LotNo, Lo"& _ 
                "tStartTime, LotEndTime, OPNo, InputQty, TotalGood, TotalNG, CutSpeed, TableCheck"& _ 
                ", Z1KerfWidthBe, Z1KerfWidthAct, Z1KerfWidthAf, Z1CuttingPosBe, Z1CuttingPosAct,"& _ 
                " Z1CuttingPosAf, Z1ChippingBe, Z1ChippingAct, Z1ChippingAf, Z2KerfWidthBe, Z2Ker"& _ 
                "fWidthAct, Z2KerfWidthAf, Z2CuttingPosBe, Z2CuttingPosAct, Z2CuttingPosAf, Z2Chi"& _ 
                "ppingBe, Z2ChippingAct, Z2ChippingAf, PKGBurrBe, PKGBurrAf, MeltPlateBe, MeltPla"& _ 
                "teAf, CrackChippingBe, CrackChippingAf, CutDepthBe, CutDepthAf, Z1BladeAmonthWea"& _ 
                "r, Z2BladeAmonthWear, Z1BladeChange, Z2BladeChange, Z1BladeCarlibation, Z2BladeC"& _ 
                "arlibation, AlmNotFoundMacroTargQty, AlmNotFoundMicroTargQty, AlmLeastSqareAppro"& _ 
                "xQty, AlmNonContSetupCheckQty, AlmNonContSetupReppErrQty, AlmBladeWearErrQty, Al"& _ 
                "mBladeExposLimitQty, AlmCutWaferFlowLowLimitQty, Andon, GLCheck, LotJudgement, N"& _ 
                "etVersion, OPJudgement, Remark, SelfConVersion, LeadZingScratchAf, LeadZingScrat"& _ 
                "chBe, Z1BladeLotNo, Z1BladeType, Z2BladeLotNo, Z2BladeType, ICOffQty, MakerQty F"& _ 
                "ROM MAPPKGDCData WHERE (LotNo = @LotNo) AND (LotStartTime = @LotStartTime) AND ("& _ 
                "MCNo = @MCNo)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MCNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotStartTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotStartTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotEndTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotEndTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InputQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InputQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalGood", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalGood", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CutSpeed", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CutSpeed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TableCheck", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TableCheck", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z1KerfWidthBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1KerfWidthBe", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z1KerfWidthAct", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1KerfWidthAct", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z1KerfWidthAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1KerfWidthAf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z1CuttingPosBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1CuttingPosBe", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z1CuttingPosAct", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1CuttingPosAct", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z1CuttingPosAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1CuttingPosAf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z1ChippingBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1ChippingBe", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z1ChippingAct", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1ChippingAct", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z1ChippingAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1ChippingAf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z2KerfWidthBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2KerfWidthBe", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z2KerfWidthAct", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2KerfWidthAct", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z2KerfWidthAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2KerfWidthAf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z2CuttingPosBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2CuttingPosBe", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z2CuttingPosAct", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2CuttingPosAct", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z2CuttingPosAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2CuttingPosAf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z2ChippingBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2ChippingBe", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z2ChippingAct", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2ChippingAct", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z2ChippingAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2ChippingAf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PKGBurrBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PKGBurrBe", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PKGBurrAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PKGBurrAf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MeltPlateBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeltPlateBe", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MeltPlateAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeltPlateAf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CrackChippingBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CrackChippingBe", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CrackChippingAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CrackChippingAf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CutDepthBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CutDepthBe", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CutDepthAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CutDepthAf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z1BladeAmonthWear", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1BladeAmonthWear", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z2BladeAmonthWear", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2BladeAmonthWear", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z1BladeChange", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1BladeChange", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z2BladeChange", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2BladeChange", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z1BladeCarlibation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1BladeCarlibation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z2BladeCarlibation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2BladeCarlibation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AlmNotFoundMacroTargQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmNotFoundMacroTargQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AlmNotFoundMicroTargQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmNotFoundMicroTargQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AlmLeastSqareApproxQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmLeastSqareApproxQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AlmNonContSetupCheckQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmNonContSetupCheckQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AlmNonContSetupReppErrQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmNonContSetupReppErrQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AlmBladeWearErrQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmBladeWearErrQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AlmBladeExposLimitQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmBladeExposLimitQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AlmCutWaferFlowLowLimitQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmCutWaferFlowLowLimitQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Andon", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Andon", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GLCheck", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GLCheck", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotJudgement", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotJudgement", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NetVersion", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NetVersion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPJudgement", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPJudgement", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remark", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remark", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SelfConVersion", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SelfConVersion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LeadZingScratchAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LeadZingScratchAf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LeadZingScratchBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LeadZingScratchBe", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z1BladeLotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1BladeLotNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z1BladeType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1BladeType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z2BladeLotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2BladeLotNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Z2BladeType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2BladeType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICOffQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICOffQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MakerQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MakerQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MCNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotStartTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotStartTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LotEndTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotEndTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotEndTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotEndTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OPNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_InputQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InputQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_InputQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InputQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TotalGood", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalGood", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TotalGood", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalGood", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TotalNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TotalNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CutSpeed", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CutSpeed", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CutSpeed", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CutSpeed", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TableCheck", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TableCheck", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TableCheck", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TableCheck", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z1KerfWidthBe", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1KerfWidthBe", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z1KerfWidthBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1KerfWidthBe", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z1KerfWidthAct", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1KerfWidthAct", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z1KerfWidthAct", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1KerfWidthAct", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z1KerfWidthAf", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1KerfWidthAf", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z1KerfWidthAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1KerfWidthAf", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z1CuttingPosBe", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1CuttingPosBe", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z1CuttingPosBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1CuttingPosBe", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z1CuttingPosAct", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1CuttingPosAct", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z1CuttingPosAct", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1CuttingPosAct", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z1CuttingPosAf", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1CuttingPosAf", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z1CuttingPosAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1CuttingPosAf", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z1ChippingBe", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1ChippingBe", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z1ChippingBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1ChippingBe", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z1ChippingAct", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1ChippingAct", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z1ChippingAct", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1ChippingAct", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z1ChippingAf", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1ChippingAf", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z1ChippingAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1ChippingAf", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z2KerfWidthBe", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2KerfWidthBe", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z2KerfWidthBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2KerfWidthBe", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z2KerfWidthAct", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2KerfWidthAct", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z2KerfWidthAct", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2KerfWidthAct", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z2KerfWidthAf", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2KerfWidthAf", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z2KerfWidthAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2KerfWidthAf", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z2CuttingPosBe", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2CuttingPosBe", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z2CuttingPosBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2CuttingPosBe", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z2CuttingPosAct", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2CuttingPosAct", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z2CuttingPosAct", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2CuttingPosAct", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z2CuttingPosAf", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2CuttingPosAf", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z2CuttingPosAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2CuttingPosAf", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z2ChippingBe", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2ChippingBe", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z2ChippingBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2ChippingBe", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z2ChippingAct", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2ChippingAct", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z2ChippingAct", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2ChippingAct", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z2ChippingAf", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2ChippingAf", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z2ChippingAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2ChippingAf", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PKGBurrBe", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PKGBurrBe", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PKGBurrBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PKGBurrBe", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PKGBurrAf", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PKGBurrAf", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PKGBurrAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PKGBurrAf", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MeltPlateBe", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeltPlateBe", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MeltPlateBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeltPlateBe", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MeltPlateAf", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeltPlateAf", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MeltPlateAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MeltPlateAf", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CrackChippingBe", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CrackChippingBe", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CrackChippingBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CrackChippingBe", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CrackChippingAf", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CrackChippingAf", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CrackChippingAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CrackChippingAf", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CutDepthBe", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CutDepthBe", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CutDepthBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CutDepthBe", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CutDepthAf", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CutDepthAf", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CutDepthAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CutDepthAf", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z1BladeAmonthWear", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1BladeAmonthWear", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z1BladeAmonthWear", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1BladeAmonthWear", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z2BladeAmonthWear", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2BladeAmonthWear", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z2BladeAmonthWear", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2BladeAmonthWear", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z1BladeChange", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1BladeChange", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z1BladeChange", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1BladeChange", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z2BladeChange", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2BladeChange", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z2BladeChange", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2BladeChange", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z1BladeCarlibation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1BladeCarlibation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z1BladeCarlibation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1BladeCarlibation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z2BladeCarlibation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2BladeCarlibation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z2BladeCarlibation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2BladeCarlibation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AlmNotFoundMacroTargQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmNotFoundMacroTargQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AlmNotFoundMacroTargQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmNotFoundMacroTargQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AlmNotFoundMicroTargQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmNotFoundMicroTargQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AlmNotFoundMicroTargQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmNotFoundMicroTargQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AlmLeastSqareApproxQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmLeastSqareApproxQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AlmLeastSqareApproxQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmLeastSqareApproxQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AlmNonContSetupCheckQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmNonContSetupCheckQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AlmNonContSetupCheckQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmNonContSetupCheckQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AlmNonContSetupReppErrQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmNonContSetupReppErrQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AlmNonContSetupReppErrQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmNonContSetupReppErrQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AlmBladeWearErrQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmBladeWearErrQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AlmBladeWearErrQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmBladeWearErrQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AlmBladeExposLimitQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmBladeExposLimitQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AlmBladeExposLimitQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmBladeExposLimitQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AlmCutWaferFlowLowLimitQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmCutWaferFlowLowLimitQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AlmCutWaferFlowLowLimitQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlmCutWaferFlowLowLimitQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Andon", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Andon", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Andon", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Andon", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GLCheck", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GLCheck", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GLCheck", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GLCheck", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LotJudgement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotJudgement", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotJudgement", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotJudgement", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NetVersion", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NetVersion", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NetVersion", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NetVersion", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OPJudgement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPJudgement", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPJudgement", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPJudgement", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remark", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remark", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remark", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remark", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SelfConVersion", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SelfConVersion", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SelfConVersion", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SelfConVersion", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LeadZingScratchAf", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LeadZingScratchAf", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LeadZingScratchAf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LeadZingScratchAf", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LeadZingScratchBe", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LeadZingScratchBe", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LeadZingScratchBe", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LeadZingScratchBe", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z1BladeLotNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1BladeLotNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z1BladeLotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1BladeLotNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z1BladeType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1BladeType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z1BladeType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z1BladeType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z2BladeLotNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2BladeLotNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z2BladeLotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2BladeLotNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Z2BladeType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2BladeType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Z2BladeType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Z2BladeType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ICOffQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICOffQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICOffQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICOffQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MakerQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MakerQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MakerQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MakerQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.MAP_Dicer.My.MySettings.Default.DBxConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MCNo, LotNo, LotStartTime, LotEndTime, OPNo, InputQty, TotalGood, TotalNG,"& _ 
                " CutSpeed, TableCheck, Z1KerfWidthBe, Z1KerfWidthAct, Z1KerfWidthAf, Z1CuttingPo"& _ 
                "sBe, Z1CuttingPosAct, Z1CuttingPosAf, Z1ChippingBe, Z1ChippingAct, Z1ChippingAf,"& _ 
                " Z2KerfWidthBe, Z2KerfWidthAct, Z2KerfWidthAf, Z2CuttingPosBe, Z2CuttingPosAct, "& _ 
                "Z2CuttingPosAf, Z2ChippingBe, Z2ChippingAct, Z2ChippingAf, PKGBurrBe, PKGBurrAf,"& _ 
                " MeltPlateBe, MeltPlateAf, CrackChippingBe, CrackChippingAf, CutDepthBe, CutDept"& _ 
                "hAf, Z1BladeAmonthWear, Z2BladeAmonthWear, Z1BladeChange, Z2BladeChange, Z1Blade"& _ 
                "Carlibation, Z2BladeCarlibation, AlmNotFoundMacroTargQty, AlmNotFoundMicroTargQt"& _ 
                "y, AlmLeastSqareApproxQty, AlmNonContSetupCheckQty, AlmNonContSetupReppErrQty, A"& _ 
                "lmBladeWearErrQty, AlmBladeExposLimitQty, AlmCutWaferFlowLowLimitQty, Andon, GLC"& _ 
                "heck, LotJudgement, NetVersion, OPJudgement, Remark, SelfConVersion, LeadZingScr"& _ 
                "atchAf, LeadZingScratchBe, Z1BladeLotNo, Z1BladeType, Z2BladeLotNo, Z2BladeType,"& _ 
                " ICOffQty, MakerQty FROM MAPPKGDCData WHERE (MCNo = @mcno) AND (LotNo = @lotno) "& _ 
                "AND (LotStartTime = @lotstart)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@mcno", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lotno", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lotstart", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "LotStartTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT AlmBladeExposLimitQty, AlmBladeWearErrQty, AlmCutWaferFlowLowLimitQty, Alm"& _ 
                "LeastSqareApproxQty, AlmNonContSetupCheckQty, AlmNonContSetupReppErrQty, AlmNotF"& _ 
                "oundMacroTargQty, AlmNotFoundMicroTargQty, Andon, CrackChippingAf, CrackChipping"& _ 
                "Be, CutDepthAf, CutDepthBe, CutSpeed, GLCheck, InputQty, LotEndTime, LotJudgemen"& _ 
                "t, LotNo, LotStartTime, MCNo, MeltPlateAf, MeltPlateBe, NetVersion, OPJudgement,"& _ 
                " OPNo, PKGBurrAf, PKGBurrBe, Remark, SelfConVersion, TableCheck, TotalGood, Tota"& _ 
                "lNG, Z1BladeAmonthWear, Z1BladeCarlibation, Z1BladeChange, Z1ChippingAct, Z1Chip"& _ 
                "pingAf, Z1ChippingBe, Z1CuttingPosAct, Z1CuttingPosAf, Z1CuttingPosBe, Z1KerfWid"& _ 
                "thAct, Z1KerfWidthAf, Z1KerfWidthBe, Z2BladeAmonthWear, Z2BladeCarlibation, Z2Bl"& _ 
                "adeChange, Z2ChippingAct, Z2ChippingAf, Z2ChippingBe, Z2CuttingPosAct, Z2Cutting"& _ 
                "PosAf, Z2CuttingPosBe, Z2KerfWidthAct, Z2KerfWidthAf, Z2KerfWidthBe, LeadZingScr"& _ 
                "atchAf, LeadZingScratchBe, Z1BladeLotNo, Z1BladeType, Z2BladeLotNo, Z2BladeType,"& _ 
                " ICOffQty, MakerQty FROM MAPPKGDCData WHERE (MCNo = @mcno) AND (LotEndTime IS NU"& _ 
                "LL) AND (Remark <> 'LotCancel' OR Remark IS NULL) ORDER BY LotStartTime DESC"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@mcno", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT TOP (10) LotNo, LotStartTime, Z1BladeAmonthWear, Z2BladeAmonthWear, LotEnd"& _ 
                "Time, MCNo, LeadZingScratchAf, LeadZingScratchBe, Z1BladeLotNo, Z1BladeType, Z2B"& _ 
                "ladeLotNo, Z2BladeType, ICOffQty, MakerQty FROM MAPPKGDCData WHERE (MCNo = @mcno"& _ 
                ") AND (Remark <> ' LotCancel' OR Remark IS NULL) ORDER BY LotStartTime DESC"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@mcno", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function LoadLot(ByVal dataTable As DBxDataSet.MAPPKGDCDataDataTable, ByVal mcno As String, ByVal lotno As String, ByVal lotstart As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (mcno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("mcno")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(mcno,String)
            End If
            If (lotno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("lotno")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(lotno,String)
            End If
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(lotstart,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByMCNo(ByVal dataTable As DBxDataSet.MAPPKGDCDataDataTable, ByVal mcno As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (mcno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("mcno")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(mcno,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillPreviousBladeAmonthWear(ByVal dataTable As DBxDataSet.MAPPKGDCDataDataTable, ByVal mcno As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (mcno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("mcno")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(mcno,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy1(ByVal mcno As String) As DBxDataSet.MAPPKGDCDataDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (mcno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("mcno")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(mcno,String)
            End If
            Dim dataTable As DBxDataSet.MAPPKGDCDataDataTable = New DBxDataSet.MAPPKGDCDataDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DBxDataSet.MAPPKGDCDataDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DBxDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "MAPPKGDCData")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_MCNo As String,  _
                    ByVal Original_LotNo As String,  _
                    ByVal Original_LotStartTime As Date,  _
                    ByVal Original_LotEndTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_OPNo As String,  _
                    ByVal Original_InputQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TotalGood As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TotalNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_CutSpeed As String,  _
                    ByVal Original_TableCheck As String,  _
                    ByVal Original_Z1KerfWidthBe As String,  _
                    ByVal Original_Z1KerfWidthAct As Global.System.Nullable(Of Short),  _
                    ByVal Original_Z1KerfWidthAf As String,  _
                    ByVal Original_Z1CuttingPosBe As String,  _
                    ByVal Original_Z1CuttingPosAct As Global.System.Nullable(Of Short),  _
                    ByVal Original_Z1CuttingPosAf As String,  _
                    ByVal Original_Z1ChippingBe As String,  _
                    ByVal Original_Z1ChippingAct As Global.System.Nullable(Of Short),  _
                    ByVal Original_Z1ChippingAf As String,  _
                    ByVal Original_Z2KerfWidthBe As String,  _
                    ByVal Original_Z2KerfWidthAct As Global.System.Nullable(Of Short),  _
                    ByVal Original_Z2KerfWidthAf As String,  _
                    ByVal Original_Z2CuttingPosBe As String,  _
                    ByVal Original_Z2CuttingPosAct As Global.System.Nullable(Of Short),  _
                    ByVal Original_Z2CuttingPosAf As String,  _
                    ByVal Original_Z2ChippingBe As String,  _
                    ByVal Original_Z2ChippingAct As Global.System.Nullable(Of Short),  _
                    ByVal Original_Z2ChippingAf As String,  _
                    ByVal Original_PKGBurrBe As String,  _
                    ByVal Original_PKGBurrAf As String,  _
                    ByVal Original_MeltPlateBe As String,  _
                    ByVal Original_MeltPlateAf As String,  _
                    ByVal Original_CrackChippingBe As String,  _
                    ByVal Original_CrackChippingAf As String,  _
                    ByVal Original_CutDepthBe As String,  _
                    ByVal Original_CutDepthAf As String,  _
                    ByVal Original_Z1BladeAmonthWear As Global.System.Nullable(Of Short),  _
                    ByVal Original_Z2BladeAmonthWear As Global.System.Nullable(Of Short),  _
                    ByVal Original_Z1BladeChange As String,  _
                    ByVal Original_Z2BladeChange As String,  _
                    ByVal Original_Z1BladeCarlibation As String,  _
                    ByVal Original_Z2BladeCarlibation As String,  _
                    ByVal Original_AlmNotFoundMacroTargQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_AlmNotFoundMicroTargQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_AlmLeastSqareApproxQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_AlmNonContSetupCheckQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_AlmNonContSetupReppErrQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_AlmBladeWearErrQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_AlmBladeExposLimitQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_AlmCutWaferFlowLowLimitQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_Andon As String,  _
                    ByVal Original_GLCheck As String,  _
                    ByVal Original_LotJudgement As String,  _
                    ByVal Original_NetVersion As String,  _
                    ByVal Original_OPJudgement As String,  _
                    ByVal Original_Remark As String,  _
                    ByVal Original_SelfConVersion As String,  _
                    ByVal Original_LeadZingScratchAf As String,  _
                    ByVal Original_LeadZingScratchBe As String,  _
                    ByVal Original_Z1BladeLotNo As String,  _
                    ByVal Original_Z1BladeType As String,  _
                    ByVal Original_Z2BladeLotNo As String,  _
                    ByVal Original_Z2BladeType As String,  _
                    ByVal Original_ICOffQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_MakerQty As Global.System.Nullable(Of Integer)) As Integer
            If (Original_MCNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MCNo")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MCNo,String)
            End If
            If (Original_LotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LotNo")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_LotNo,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_LotStartTime,Date)
            If (Original_LotEndTime.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_LotEndTime.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_OPNo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_OPNo,String)
            End If
            If (Original_InputQty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_InputQty.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_TotalGood.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_TotalGood.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_TotalNG.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_TotalNG.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_CutSpeed Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_CutSpeed,String)
            End If
            If (Original_TableCheck Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_TableCheck,String)
            End If
            If (Original_Z1KerfWidthBe Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_Z1KerfWidthBe,String)
            End If
            If (Original_Z1KerfWidthAct.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_Z1KerfWidthAct.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_Z1KerfWidthAf Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_Z1KerfWidthAf,String)
            End If
            If (Original_Z1CuttingPosBe Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_Z1CuttingPosBe,String)
            End If
            If (Original_Z1CuttingPosAct.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_Z1CuttingPosAct.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_Z1CuttingPosAf Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_Z1CuttingPosAf,String)
            End If
            If (Original_Z1ChippingBe Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_Z1ChippingBe,String)
            End If
            If (Original_Z1ChippingAct.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_Z1ChippingAct.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_Z1ChippingAf Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_Z1ChippingAf,String)
            End If
            If (Original_Z2KerfWidthBe Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_Z2KerfWidthBe,String)
            End If
            If (Original_Z2KerfWidthAct.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_Z2KerfWidthAct.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_Z2KerfWidthAf Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_Z2KerfWidthAf,String)
            End If
            If (Original_Z2CuttingPosBe Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_Z2CuttingPosBe,String)
            End If
            If (Original_Z2CuttingPosAct.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_Z2CuttingPosAct.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_Z2CuttingPosAf Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_Z2CuttingPosAf,String)
            End If
            If (Original_Z2ChippingBe Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(Original_Z2ChippingBe,String)
            End If
            If (Original_Z2ChippingAct.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(Original_Z2ChippingAct.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (Original_Z2ChippingAf Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(Original_Z2ChippingAf,String)
            End If
            If (Original_PKGBurrBe Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(Original_PKGBurrBe,String)
            End If
            If (Original_PKGBurrAf Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(Original_PKGBurrAf,String)
            End If
            If (Original_MeltPlateBe Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(Original_MeltPlateBe,String)
            End If
            If (Original_MeltPlateAf Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(60).Value = CType(Original_MeltPlateAf,String)
            End If
            If (Original_CrackChippingBe Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(Original_CrackChippingBe,String)
            End If
            If (Original_CrackChippingAf Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(64).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(64).Value = CType(Original_CrackChippingAf,String)
            End If
            If (Original_CutDepthBe Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(65).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(66).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(65).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(66).Value = CType(Original_CutDepthBe,String)
            End If
            If (Original_CutDepthAf Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(67).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(68).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(67).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(68).Value = CType(Original_CutDepthAf,String)
            End If
            If (Original_Z1BladeAmonthWear.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(70).Value = CType(Original_Z1BladeAmonthWear.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(70).Value = Global.System.DBNull.Value
            End If
            If (Original_Z2BladeAmonthWear.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(71).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(72).Value = CType(Original_Z2BladeAmonthWear.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(71).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(72).Value = Global.System.DBNull.Value
            End If
            If (Original_Z1BladeChange Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(74).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(74).Value = CType(Original_Z1BladeChange,String)
            End If
            If (Original_Z2BladeChange Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(75).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(76).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(75).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(76).Value = CType(Original_Z2BladeChange,String)
            End If
            If (Original_Z1BladeCarlibation Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(77).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(78).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(77).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(78).Value = CType(Original_Z1BladeCarlibation,String)
            End If
            If (Original_Z2BladeCarlibation Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(79).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(80).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(79).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(80).Value = CType(Original_Z2BladeCarlibation,String)
            End If
            If (Original_AlmNotFoundMacroTargQty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(81).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(82).Value = CType(Original_AlmNotFoundMacroTargQty.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(81).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(82).Value = Global.System.DBNull.Value
            End If
            If (Original_AlmNotFoundMicroTargQty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(83).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(84).Value = CType(Original_AlmNotFoundMicroTargQty.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(83).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(84).Value = Global.System.DBNull.Value
            End If
            If (Original_AlmLeastSqareApproxQty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(85).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(86).Value = CType(Original_AlmLeastSqareApproxQty.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(85).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(86).Value = Global.System.DBNull.Value
            End If
            If (Original_AlmNonContSetupCheckQty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(87).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(88).Value = CType(Original_AlmNonContSetupCheckQty.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(87).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(88).Value = Global.System.DBNull.Value
            End If
            If (Original_AlmNonContSetupReppErrQty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(89).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(90).Value = CType(Original_AlmNonContSetupReppErrQty.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(89).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(90).Value = Global.System.DBNull.Value
            End If
            If (Original_AlmBladeWearErrQty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(91).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(92).Value = CType(Original_AlmBladeWearErrQty.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(91).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(92).Value = Global.System.DBNull.Value
            End If
            If (Original_AlmBladeExposLimitQty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(93).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(94).Value = CType(Original_AlmBladeExposLimitQty.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(93).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(94).Value = Global.System.DBNull.Value
            End If
            If (Original_AlmCutWaferFlowLowLimitQty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(95).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(96).Value = CType(Original_AlmCutWaferFlowLowLimitQty.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(95).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(96).Value = Global.System.DBNull.Value
            End If
            If (Original_Andon Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(97).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(98).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(97).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(98).Value = CType(Original_Andon,String)
            End If
            If (Original_GLCheck Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(99).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(100).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(99).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(100).Value = CType(Original_GLCheck,String)
            End If
            If (Original_LotJudgement Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(101).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(102).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(101).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(102).Value = CType(Original_LotJudgement,String)
            End If
            If (Original_NetVersion Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(103).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(104).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(103).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(104).Value = CType(Original_NetVersion,String)
            End If
            If (Original_OPJudgement Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(105).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(106).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(105).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(106).Value = CType(Original_OPJudgement,String)
            End If
            If (Original_Remark Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(107).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(108).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(107).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(108).Value = CType(Original_Remark,String)
            End If
            If (Original_SelfConVersion Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(109).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(110).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(109).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(110).Value = CType(Original_SelfConVersion,String)
            End If
            If (Original_LeadZingScratchAf Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(111).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(112).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(111).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(112).Value = CType(Original_LeadZingScratchAf,String)
            End If
            If (Original_LeadZingScratchBe Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(113).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(114).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(113).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(114).Value = CType(Original_LeadZingScratchBe,String)
            End If
            If (Original_Z1BladeLotNo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(115).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(116).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(115).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(116).Value = CType(Original_Z1BladeLotNo,String)
            End If
            If (Original_Z1BladeType Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(117).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(118).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(117).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(118).Value = CType(Original_Z1BladeType,String)
            End If
            If (Original_Z2BladeLotNo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(119).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(120).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(119).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(120).Value = CType(Original_Z2BladeLotNo,String)
            End If
            If (Original_Z2BladeType Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(121).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(122).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(121).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(122).Value = CType(Original_Z2BladeType,String)
            End If
            If (Original_ICOffQty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(123).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(124).Value = CType(Original_ICOffQty.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(123).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(124).Value = Global.System.DBNull.Value
            End If
            If (Original_MakerQty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(125).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(126).Value = CType(Original_MakerQty.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(125).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(126).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal MCNo As String,  _
                    ByVal LotNo As String,  _
                    ByVal LotStartTime As Date,  _
                    ByVal LotEndTime As Global.System.Nullable(Of Date),  _
                    ByVal OPNo As String,  _
                    ByVal InputQty As Global.System.Nullable(Of Integer),  _
                    ByVal TotalGood As Global.System.Nullable(Of Integer),  _
                    ByVal TotalNG As Global.System.Nullable(Of Integer),  _
                    ByVal CutSpeed As String,  _
                    ByVal TableCheck As String,  _
                    ByVal Z1KerfWidthBe As String,  _
                    ByVal Z1KerfWidthAct As Global.System.Nullable(Of Short),  _
                    ByVal Z1KerfWidthAf As String,  _
                    ByVal Z1CuttingPosBe As String,  _
                    ByVal Z1CuttingPosAct As Global.System.Nullable(Of Short),  _
                    ByVal Z1CuttingPosAf As String,  _
                    ByVal Z1ChippingBe As String,  _
                    ByVal Z1ChippingAct As Global.System.Nullable(Of Short),  _
                    ByVal Z1ChippingAf As String,  _
                    ByVal Z2KerfWidthBe As String,  _
                    ByVal Z2KerfWidthAct As Global.System.Nullable(Of Short),  _
                    ByVal Z2KerfWidthAf As String,  _
                    ByVal Z2CuttingPosBe As String,  _
                    ByVal Z2CuttingPosAct As Global.System.Nullable(Of Short),  _
                    ByVal Z2CuttingPosAf As String,  _
                    ByVal Z2ChippingBe As String,  _
                    ByVal Z2ChippingAct As Global.System.Nullable(Of Short),  _
                    ByVal Z2ChippingAf As String,  _
                    ByVal PKGBurrBe As String,  _
                    ByVal PKGBurrAf As String,  _
                    ByVal MeltPlateBe As String,  _
                    ByVal MeltPlateAf As String,  _
                    ByVal CrackChippingBe As String,  _
                    ByVal CrackChippingAf As String,  _
                    ByVal CutDepthBe As String,  _
                    ByVal CutDepthAf As String,  _
                    ByVal Z1BladeAmonthWear As Global.System.Nullable(Of Short),  _
                    ByVal Z2BladeAmonthWear As Global.System.Nullable(Of Short),  _
                    ByVal Z1BladeChange As String,  _
                    ByVal Z2BladeChange As String,  _
                    ByVal Z1BladeCarlibation As String,  _
                    ByVal Z2BladeCarlibation As String,  _
                    ByVal AlmNotFoundMacroTargQty As Global.System.Nullable(Of Short),  _
                    ByVal AlmNotFoundMicroTargQty As Global.System.Nullable(Of Short),  _
                    ByVal AlmLeastSqareApproxQty As Global.System.Nullable(Of Short),  _
                    ByVal AlmNonContSetupCheckQty As Global.System.Nullable(Of Short),  _
                    ByVal AlmNonContSetupReppErrQty As Global.System.Nullable(Of Short),  _
                    ByVal AlmBladeWearErrQty As Global.System.Nullable(Of Short),  _
                    ByVal AlmBladeExposLimitQty As Global.System.Nullable(Of Short),  _
                    ByVal AlmCutWaferFlowLowLimitQty As Global.System.Nullable(Of Short),  _
                    ByVal Andon As String,  _
                    ByVal GLCheck As String,  _
                    ByVal LotJudgement As String,  _
                    ByVal NetVersion As String,  _
                    ByVal OPJudgement As String,  _
                    ByVal Remark As String,  _
                    ByVal SelfConVersion As String,  _
                    ByVal LeadZingScratchAf As String,  _
                    ByVal LeadZingScratchBe As String,  _
                    ByVal Z1BladeLotNo As String,  _
                    ByVal Z1BladeType As String,  _
                    ByVal Z2BladeLotNo As String,  _
                    ByVal Z2BladeType As String,  _
                    ByVal ICOffQty As Global.System.Nullable(Of Integer),  _
                    ByVal MakerQty As Global.System.Nullable(Of Integer)) As Integer
            If (MCNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MCNo")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(MCNo,String)
            End If
            If (LotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LotNo")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(LotNo,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(LotStartTime,Date)
            If (LotEndTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(LotEndTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (OPNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(OPNo,String)
            End If
            If (InputQty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(InputQty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (TotalGood.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(TotalGood.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (TotalNG.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(TotalNG.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (CutSpeed Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(CutSpeed,String)
            End If
            If (TableCheck Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(TableCheck,String)
            End If
            If (Z1KerfWidthBe Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Z1KerfWidthBe,String)
            End If
            If (Z1KerfWidthAct.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Z1KerfWidthAct.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Z1KerfWidthAf Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Z1KerfWidthAf,String)
            End If
            If (Z1CuttingPosBe Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Z1CuttingPosBe,String)
            End If
            If (Z1CuttingPosAct.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Z1CuttingPosAct.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Z1CuttingPosAf Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Z1CuttingPosAf,String)
            End If
            If (Z1ChippingBe Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Z1ChippingBe,String)
            End If
            If (Z1ChippingAct.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Z1ChippingAct.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Z1ChippingAf Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(Z1ChippingAf,String)
            End If
            If (Z2KerfWidthBe Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(Z2KerfWidthBe,String)
            End If
            If (Z2KerfWidthAct.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(Z2KerfWidthAct.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Z2KerfWidthAf Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(Z2KerfWidthAf,String)
            End If
            If (Z2CuttingPosBe Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(Z2CuttingPosBe,String)
            End If
            If (Z2CuttingPosAct.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(Z2CuttingPosAct.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Z2CuttingPosAf Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(Z2CuttingPosAf,String)
            End If
            If (Z2ChippingBe Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(Z2ChippingBe,String)
            End If
            If (Z2ChippingAct.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(Z2ChippingAct.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Z2ChippingAf Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(Z2ChippingAf,String)
            End If
            If (PKGBurrBe Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(PKGBurrBe,String)
            End If
            If (PKGBurrAf Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(PKGBurrAf,String)
            End If
            If (MeltPlateBe Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(MeltPlateBe,String)
            End If
            If (MeltPlateAf Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(MeltPlateAf,String)
            End If
            If (CrackChippingBe Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(CrackChippingBe,String)
            End If
            If (CrackChippingAf Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(CrackChippingAf,String)
            End If
            If (CutDepthBe Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(CutDepthBe,String)
            End If
            If (CutDepthAf Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(CutDepthAf,String)
            End If
            If (Z1BladeAmonthWear.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(Z1BladeAmonthWear.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Z2BladeAmonthWear.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(Z2BladeAmonthWear.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Z1BladeChange Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(Z1BladeChange,String)
            End If
            If (Z2BladeChange Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(Z2BladeChange,String)
            End If
            If (Z1BladeCarlibation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(Z1BladeCarlibation,String)
            End If
            If (Z2BladeCarlibation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(Z2BladeCarlibation,String)
            End If
            If (AlmNotFoundMacroTargQty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(AlmNotFoundMacroTargQty.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (AlmNotFoundMicroTargQty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(AlmNotFoundMicroTargQty.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (AlmLeastSqareApproxQty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(AlmLeastSqareApproxQty.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (AlmNonContSetupCheckQty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(AlmNonContSetupCheckQty.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (AlmNonContSetupReppErrQty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(AlmNonContSetupReppErrQty.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (AlmBladeWearErrQty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(AlmBladeWearErrQty.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (AlmBladeExposLimitQty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(AlmBladeExposLimitQty.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (AlmCutWaferFlowLowLimitQty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(AlmCutWaferFlowLowLimitQty.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (Andon Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(Andon,String)
            End If
            If (GLCheck Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(GLCheck,String)
            End If
            If (LotJudgement Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(52).Value = CType(LotJudgement,String)
            End If
            If (NetVersion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(NetVersion,String)
            End If
            If (OPJudgement Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(OPJudgement,String)
            End If
            If (Remark Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(55).Value = CType(Remark,String)
            End If
            If (SelfConVersion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(56).Value = CType(SelfConVersion,String)
            End If
            If (LeadZingScratchAf Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(57).Value = CType(LeadZingScratchAf,String)
            End If
            If (LeadZingScratchBe Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(58).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(58).Value = CType(LeadZingScratchBe,String)
            End If
            If (Z1BladeLotNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(59).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(59).Value = CType(Z1BladeLotNo,String)
            End If
            If (Z1BladeType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(60).Value = CType(Z1BladeType,String)
            End If
            If (Z2BladeLotNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(61).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(61).Value = CType(Z2BladeLotNo,String)
            End If
            If (Z2BladeType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(62).Value = CType(Z2BladeType,String)
            End If
            If (ICOffQty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(63).Value = CType(ICOffQty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (MakerQty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(64).Value = CType(MakerQty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal MCNo As String,  _
                    ByVal LotNo As String,  _
                    ByVal LotStartTime As Date,  _
                    ByVal LotEndTime As Global.System.Nullable(Of Date),  _
                    ByVal OPNo As String,  _
                    ByVal InputQty As Global.System.Nullable(Of Integer),  _
                    ByVal TotalGood As Global.System.Nullable(Of Integer),  _
                    ByVal TotalNG As Global.System.Nullable(Of Integer),  _
                    ByVal CutSpeed As String,  _
                    ByVal TableCheck As String,  _
                    ByVal Z1KerfWidthBe As String,  _
                    ByVal Z1KerfWidthAct As Global.System.Nullable(Of Short),  _
                    ByVal Z1KerfWidthAf As String,  _
                    ByVal Z1CuttingPosBe As String,  _
                    ByVal Z1CuttingPosAct As Global.System.Nullable(Of Short),  _
                    ByVal Z1CuttingPosAf As String,  _
                    ByVal Z1ChippingBe As String,  _
                    ByVal Z1ChippingAct As Global.System.Nullable(Of Short),  _
                    ByVal Z1ChippingAf As String,  _
                    ByVal Z2KerfWidthBe As String,  _
                    ByVal Z2KerfWidthAct As Global.System.Nullable(Of Short),  _
                    ByVal Z2KerfWidthAf As String,  _
                    ByVal Z2CuttingPosBe As String,  _
                    ByVal Z2CuttingPosAct As Global.System.Nullable(Of Short),  _
                    ByVal Z2CuttingPosAf As String,  _
                    ByVal Z2ChippingBe As String,  _
                    ByVal Z2ChippingAct As Global.System.Nullable(Of Short),  _
                    ByVal Z2ChippingAf As String,  _
                    ByVal PKGBurrBe As String,  _
                    ByVal PKGBurrAf As String,  _
                    ByVal MeltPlateBe As String,  _
                    ByVal MeltPlateAf As String,  _
                    ByVal CrackChippingBe As String,  _
                    ByVal CrackChippingAf As String,  _
                    ByVal CutDepthBe As String,  _
                    ByVal CutDepthAf As String,  _
                    ByVal Z1BladeAmonthWear As Global.System.Nullable(Of Short),  _
                    ByVal Z2BladeAmonthWear As Global.System.Nullable(Of Short),  _
                    ByVal Z1BladeChange As String,  _
                    ByVal Z2BladeChange As String,  _
                    ByVal Z1BladeCarlibation As String,  _
                    ByVal Z2BladeCarlibation As String,  _
                    ByVal AlmNotFoundMacroTargQty As Global.System.Nullable(Of Short),  _
                    ByVal AlmNotFoundMicroTargQty As Global.System.Nullable(Of Short),  _
                    ByVal AlmLeastSqareApproxQty As Global.System.Nullable(Of Short),  _
                    ByVal AlmNonContSetupCheckQty As Global.System.Nullable(Of Short),  _
                    ByVal AlmNonContSetupReppErrQty As Global.System.Nullable(Of Short),  _
                    ByVal AlmBladeWearErrQty As Global.System.Nullable(Of Short),  _
                    ByVal AlmBladeExposLimitQty As Global.System.Nullable(Of Short),  _
                    ByVal AlmCutWaferFlowLowLimitQty As Global.System.Nullable(Of Short),  _
                    ByVal Andon As String,  _
                    ByVal GLCheck As String,  _
                    ByVal LotJudgement As String,  _
                    ByVal NetVersion As String,  _
                    ByVal OPJudgement As String,  _
                    ByVal Remark As String,  _
                    ByVal SelfConVersion As String,  _
                    ByVal LeadZingScratchAf As String,  _
                    ByVal LeadZingScratchBe As String,  _
                    ByVal Z1BladeLotNo As String,  _
                    ByVal Z1BladeType As String,  _
                    ByVal Z2BladeLotNo As String,  _
                    ByVal Z2BladeType As String,  _
                    ByVal ICOffQty As Global.System.Nullable(Of Integer),  _
                    ByVal MakerQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_MCNo As String,  _
                    ByVal Original_LotNo As String,  _
                    ByVal Original_LotStartTime As Date,  _
                    ByVal Original_LotEndTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_OPNo As String,  _
                    ByVal Original_InputQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TotalGood As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TotalNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_CutSpeed As String,  _
                    ByVal Original_TableCheck As String,  _
                    ByVal Original_Z1KerfWidthBe As String,  _
                    ByVal Original_Z1KerfWidthAct As Global.System.Nullable(Of Short),  _
                    ByVal Original_Z1KerfWidthAf As String,  _
                    ByVal Original_Z1CuttingPosBe As String,  _
                    ByVal Original_Z1CuttingPosAct As Global.System.Nullable(Of Short),  _
                    ByVal Original_Z1CuttingPosAf As String,  _
                    ByVal Original_Z1ChippingBe As String,  _
                    ByVal Original_Z1ChippingAct As Global.System.Nullable(Of Short),  _
                    ByVal Original_Z1ChippingAf As String,  _
                    ByVal Original_Z2KerfWidthBe As String,  _
                    ByVal Original_Z2KerfWidthAct As Global.System.Nullable(Of Short),  _
                    ByVal Original_Z2KerfWidthAf As String,  _
                    ByVal Original_Z2CuttingPosBe As String,  _
                    ByVal Original_Z2CuttingPosAct As Global.System.Nullable(Of Short),  _
                    ByVal Original_Z2CuttingPosAf As String,  _
                    ByVal Original_Z2ChippingBe As String,  _
                    ByVal Original_Z2ChippingAct As Global.System.Nullable(Of Short),  _
                    ByVal Original_Z2ChippingAf As String,  _
                    ByVal Original_PKGBurrBe As String,  _
                    ByVal Original_PKGBurrAf As String,  _
                    ByVal Original_MeltPlateBe As String,  _
                    ByVal Original_MeltPlateAf As String,  _
                    ByVal Original_CrackChippingBe As String,  _
                    ByVal Original_CrackChippingAf As String,  _
                    ByVal Original_CutDepthBe As String,  _
                    ByVal Original_CutDepthAf As String,  _
                    ByVal Original_Z1BladeAmonthWear As Global.System.Nullable(Of Short),  _
                    ByVal Original_Z2BladeAmonthWear As Global.System.Nullable(Of Short),  _
                    ByVal Original_Z1BladeChange As String,  _
                    ByVal Original_Z2BladeChange As String,  _
                    ByVal Original_Z1BladeCarlibation As String,  _
                    ByVal Original_Z2BladeCarlibation As String,  _
                    ByVal Original_AlmNotFoundMacroTargQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_AlmNotFoundMicroTargQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_AlmLeastSqareApproxQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_AlmNonContSetupCheckQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_AlmNonContSetupReppErrQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_AlmBladeWearErrQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_AlmBladeExposLimitQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_AlmCutWaferFlowLowLimitQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_Andon As String,  _
                    ByVal Original_GLCheck As String,  _
                    ByVal Original_LotJudgement As String,  _
                    ByVal Original_NetVersion As String,  _
                    ByVal Original_OPJudgement As String,  _
                    ByVal Original_Remark As String,  _
                    ByVal Original_SelfConVersion As String,  _
                    ByVal Original_LeadZingScratchAf As String,  _
                    ByVal Original_LeadZingScratchBe As String,  _
                    ByVal Original_Z1BladeLotNo As String,  _
                    ByVal Original_Z1BladeType As String,  _
                    ByVal Original_Z2BladeLotNo As String,  _
                    ByVal Original_Z2BladeType As String,  _
                    ByVal Original_ICOffQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_MakerQty As Global.System.Nullable(Of Integer)) As Integer
            If (MCNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MCNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MCNo,String)
            End If
            If (LotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LotNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(LotNo,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(LotStartTime,Date)
            If (LotEndTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(LotEndTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (OPNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(OPNo,String)
            End If
            If (InputQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(InputQty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (TotalGood.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(TotalGood.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (TotalNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(TotalNG.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (CutSpeed Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(CutSpeed,String)
            End If
            If (TableCheck Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(TableCheck,String)
            End If
            If (Z1KerfWidthBe Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Z1KerfWidthBe,String)
            End If
            If (Z1KerfWidthAct.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Z1KerfWidthAct.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Z1KerfWidthAf Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Z1KerfWidthAf,String)
            End If
            If (Z1CuttingPosBe Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Z1CuttingPosBe,String)
            End If
            If (Z1CuttingPosAct.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Z1CuttingPosAct.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Z1CuttingPosAf Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Z1CuttingPosAf,String)
            End If
            If (Z1ChippingBe Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Z1ChippingBe,String)
            End If
            If (Z1ChippingAct.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Z1ChippingAct.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Z1ChippingAf Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Z1ChippingAf,String)
            End If
            If (Z2KerfWidthBe Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Z2KerfWidthBe,String)
            End If
            If (Z2KerfWidthAct.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Z2KerfWidthAct.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Z2KerfWidthAf Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Z2KerfWidthAf,String)
            End If
            If (Z2CuttingPosBe Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Z2CuttingPosBe,String)
            End If
            If (Z2CuttingPosAct.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Z2CuttingPosAct.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Z2CuttingPosAf Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Z2CuttingPosAf,String)
            End If
            If (Z2ChippingBe Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Z2ChippingBe,String)
            End If
            If (Z2ChippingAct.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Z2ChippingAct.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Z2ChippingAf Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Z2ChippingAf,String)
            End If
            If (PKGBurrBe Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(PKGBurrBe,String)
            End If
            If (PKGBurrAf Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(PKGBurrAf,String)
            End If
            If (MeltPlateBe Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(MeltPlateBe,String)
            End If
            If (MeltPlateAf Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(MeltPlateAf,String)
            End If
            If (CrackChippingBe Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(CrackChippingBe,String)
            End If
            If (CrackChippingAf Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(CrackChippingAf,String)
            End If
            If (CutDepthBe Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(CutDepthBe,String)
            End If
            If (CutDepthAf Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(CutDepthAf,String)
            End If
            If (Z1BladeAmonthWear.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Z1BladeAmonthWear.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Z2BladeAmonthWear.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Z2BladeAmonthWear.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Z1BladeChange Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Z1BladeChange,String)
            End If
            If (Z2BladeChange Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Z2BladeChange,String)
            End If
            If (Z1BladeCarlibation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Z1BladeCarlibation,String)
            End If
            If (Z2BladeCarlibation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Z2BladeCarlibation,String)
            End If
            If (AlmNotFoundMacroTargQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(AlmNotFoundMacroTargQty.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (AlmNotFoundMicroTargQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(AlmNotFoundMicroTargQty.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (AlmLeastSqareApproxQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(AlmLeastSqareApproxQty.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (AlmNonContSetupCheckQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(AlmNonContSetupCheckQty.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (AlmNonContSetupReppErrQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(AlmNonContSetupReppErrQty.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (AlmBladeWearErrQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(AlmBladeWearErrQty.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (AlmBladeExposLimitQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(AlmBladeExposLimitQty.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (AlmCutWaferFlowLowLimitQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(AlmCutWaferFlowLowLimitQty.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (Andon Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Andon,String)
            End If
            If (GLCheck Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(GLCheck,String)
            End If
            If (LotJudgement Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(LotJudgement,String)
            End If
            If (NetVersion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(NetVersion,String)
            End If
            If (OPJudgement Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(OPJudgement,String)
            End If
            If (Remark Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Remark,String)
            End If
            If (SelfConVersion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(SelfConVersion,String)
            End If
            If (LeadZingScratchAf Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(LeadZingScratchAf,String)
            End If
            If (LeadZingScratchBe Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(LeadZingScratchBe,String)
            End If
            If (Z1BladeLotNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Z1BladeLotNo,String)
            End If
            If (Z1BladeType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Z1BladeType,String)
            End If
            If (Z2BladeLotNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Z2BladeLotNo,String)
            End If
            If (Z2BladeType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Z2BladeType,String)
            End If
            If (ICOffQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(ICOffQty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (MakerQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(MakerQty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            If (Original_MCNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MCNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_MCNo,String)
            End If
            If (Original_LotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LotNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(Original_LotNo,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(67).Value = CType(Original_LotStartTime,Date)
            If (Original_LotEndTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(Original_LotEndTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            End If
            If (Original_OPNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(Original_OPNo,String)
            End If
            If (Original_InputQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(Original_InputQty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = Global.System.DBNull.Value
            End If
            If (Original_TotalGood.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(Original_TotalGood.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = Global.System.DBNull.Value
            End If
            If (Original_TotalNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(Original_TotalNG.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = Global.System.DBNull.Value
            End If
            If (Original_CutSpeed Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(Original_CutSpeed,String)
            End If
            If (Original_TableCheck Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(Original_TableCheck,String)
            End If
            If (Original_Z1KerfWidthBe Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(83).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(Original_Z1KerfWidthBe,String)
            End If
            If (Original_Z1KerfWidthAct.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(Original_Z1KerfWidthAct.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(85).Value = Global.System.DBNull.Value
            End If
            If (Original_Z1KerfWidthAf Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(87).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(Original_Z1KerfWidthAf,String)
            End If
            If (Original_Z1CuttingPosBe Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(89).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(Original_Z1CuttingPosBe,String)
            End If
            If (Original_Z1CuttingPosAct.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(Original_Z1CuttingPosAct.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(91).Value = Global.System.DBNull.Value
            End If
            If (Original_Z1CuttingPosAf Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(93).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(Original_Z1CuttingPosAf,String)
            End If
            If (Original_Z1ChippingBe Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(95).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(Original_Z1ChippingBe,String)
            End If
            If (Original_Z1ChippingAct.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(Original_Z1ChippingAct.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(97).Value = Global.System.DBNull.Value
            End If
            If (Original_Z1ChippingAf Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(99).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(Original_Z1ChippingAf,String)
            End If
            If (Original_Z2KerfWidthBe Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(100).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(101).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(100).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(Original_Z2KerfWidthBe,String)
            End If
            If (Original_Z2KerfWidthAct.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(102).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(Original_Z2KerfWidthAct.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(102).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(103).Value = Global.System.DBNull.Value
            End If
            If (Original_Z2KerfWidthAf Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(104).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(105).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(104).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(105).Value = CType(Original_Z2KerfWidthAf,String)
            End If
            If (Original_Z2CuttingPosBe Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(106).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(107).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(106).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(Original_Z2CuttingPosBe,String)
            End If
            If (Original_Z2CuttingPosAct.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(Original_Z2CuttingPosAct.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(109).Value = Global.System.DBNull.Value
            End If
            If (Original_Z2CuttingPosAf Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(111).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(111).Value = CType(Original_Z2CuttingPosAf,String)
            End If
            If (Original_Z2ChippingBe Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(113).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(113).Value = CType(Original_Z2ChippingBe,String)
            End If
            If (Original_Z2ChippingAct.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(115).Value = CType(Original_Z2ChippingAct.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(115).Value = Global.System.DBNull.Value
            End If
            If (Original_Z2ChippingAf Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(116).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(117).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(116).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(117).Value = CType(Original_Z2ChippingAf,String)
            End If
            If (Original_PKGBurrBe Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(118).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(119).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(118).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(119).Value = CType(Original_PKGBurrBe,String)
            End If
            If (Original_PKGBurrAf Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(120).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(121).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(120).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(121).Value = CType(Original_PKGBurrAf,String)
            End If
            If (Original_MeltPlateBe Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(122).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(123).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(122).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(123).Value = CType(Original_MeltPlateBe,String)
            End If
            If (Original_MeltPlateAf Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(124).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(125).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(124).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(125).Value = CType(Original_MeltPlateAf,String)
            End If
            If (Original_CrackChippingBe Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(126).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(127).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(126).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(127).Value = CType(Original_CrackChippingBe,String)
            End If
            If (Original_CrackChippingAf Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(128).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(129).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(128).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(129).Value = CType(Original_CrackChippingAf,String)
            End If
            If (Original_CutDepthBe Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(130).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(131).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(130).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(131).Value = CType(Original_CutDepthBe,String)
            End If
            If (Original_CutDepthAf Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(132).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(133).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(132).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(133).Value = CType(Original_CutDepthAf,String)
            End If
            If (Original_Z1BladeAmonthWear.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(134).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(135).Value = CType(Original_Z1BladeAmonthWear.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(134).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(135).Value = Global.System.DBNull.Value
            End If
            If (Original_Z2BladeAmonthWear.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(136).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(137).Value = CType(Original_Z2BladeAmonthWear.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(136).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(137).Value = Global.System.DBNull.Value
            End If
            If (Original_Z1BladeChange Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(138).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(139).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(138).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(139).Value = CType(Original_Z1BladeChange,String)
            End If
            If (Original_Z2BladeChange Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(140).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(141).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(140).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(141).Value = CType(Original_Z2BladeChange,String)
            End If
            If (Original_Z1BladeCarlibation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(142).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(143).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(142).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(143).Value = CType(Original_Z1BladeCarlibation,String)
            End If
            If (Original_Z2BladeCarlibation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(144).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(145).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(144).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(145).Value = CType(Original_Z2BladeCarlibation,String)
            End If
            If (Original_AlmNotFoundMacroTargQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(146).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(147).Value = CType(Original_AlmNotFoundMacroTargQty.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(146).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(147).Value = Global.System.DBNull.Value
            End If
            If (Original_AlmNotFoundMicroTargQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(148).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(149).Value = CType(Original_AlmNotFoundMicroTargQty.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(148).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(149).Value = Global.System.DBNull.Value
            End If
            If (Original_AlmLeastSqareApproxQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(150).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(151).Value = CType(Original_AlmLeastSqareApproxQty.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(150).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(151).Value = Global.System.DBNull.Value
            End If
            If (Original_AlmNonContSetupCheckQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(152).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(153).Value = CType(Original_AlmNonContSetupCheckQty.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(152).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(153).Value = Global.System.DBNull.Value
            End If
            If (Original_AlmNonContSetupReppErrQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(154).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(155).Value = CType(Original_AlmNonContSetupReppErrQty.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(154).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(155).Value = Global.System.DBNull.Value
            End If
            If (Original_AlmBladeWearErrQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(156).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(157).Value = CType(Original_AlmBladeWearErrQty.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(156).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(157).Value = Global.System.DBNull.Value
            End If
            If (Original_AlmBladeExposLimitQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(158).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(159).Value = CType(Original_AlmBladeExposLimitQty.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(158).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(159).Value = Global.System.DBNull.Value
            End If
            If (Original_AlmCutWaferFlowLowLimitQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(160).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(161).Value = CType(Original_AlmCutWaferFlowLowLimitQty.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(160).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(161).Value = Global.System.DBNull.Value
            End If
            If (Original_Andon Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(162).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(163).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(162).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(163).Value = CType(Original_Andon,String)
            End If
            If (Original_GLCheck Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(164).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(165).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(164).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(165).Value = CType(Original_GLCheck,String)
            End If
            If (Original_LotJudgement Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(166).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(167).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(166).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(167).Value = CType(Original_LotJudgement,String)
            End If
            If (Original_NetVersion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(168).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(169).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(168).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(169).Value = CType(Original_NetVersion,String)
            End If
            If (Original_OPJudgement Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(170).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(171).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(170).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(171).Value = CType(Original_OPJudgement,String)
            End If
            If (Original_Remark Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(172).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(173).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(172).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(173).Value = CType(Original_Remark,String)
            End If
            If (Original_SelfConVersion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(174).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(175).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(174).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(175).Value = CType(Original_SelfConVersion,String)
            End If
            If (Original_LeadZingScratchAf Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(176).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(177).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(176).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(177).Value = CType(Original_LeadZingScratchAf,String)
            End If
            If (Original_LeadZingScratchBe Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(178).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(179).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(178).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(179).Value = CType(Original_LeadZingScratchBe,String)
            End If
            If (Original_Z1BladeLotNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(180).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(181).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(180).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(181).Value = CType(Original_Z1BladeLotNo,String)
            End If
            If (Original_Z1BladeType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(182).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(183).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(182).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(183).Value = CType(Original_Z1BladeType,String)
            End If
            If (Original_Z2BladeLotNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(184).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(185).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(184).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(185).Value = CType(Original_Z2BladeLotNo,String)
            End If
            If (Original_Z2BladeType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(186).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(187).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(186).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(187).Value = CType(Original_Z2BladeType,String)
            End If
            If (Original_ICOffQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(188).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(189).Value = CType(Original_ICOffQty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(188).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(189).Value = Global.System.DBNull.Value
            End If
            If (Original_MakerQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(190).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(191).Value = CType(Original_MakerQty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(190).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(191).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal LotEndTime As Global.System.Nullable(Of Date),  _
                    ByVal OPNo As String,  _
                    ByVal InputQty As Global.System.Nullable(Of Integer),  _
                    ByVal TotalGood As Global.System.Nullable(Of Integer),  _
                    ByVal TotalNG As Global.System.Nullable(Of Integer),  _
                    ByVal CutSpeed As String,  _
                    ByVal TableCheck As String,  _
                    ByVal Z1KerfWidthBe As String,  _
                    ByVal Z1KerfWidthAct As Global.System.Nullable(Of Short),  _
                    ByVal Z1KerfWidthAf As String,  _
                    ByVal Z1CuttingPosBe As String,  _
                    ByVal Z1CuttingPosAct As Global.System.Nullable(Of Short),  _
                    ByVal Z1CuttingPosAf As String,  _
                    ByVal Z1ChippingBe As String,  _
                    ByVal Z1ChippingAct As Global.System.Nullable(Of Short),  _
                    ByVal Z1ChippingAf As String,  _
                    ByVal Z2KerfWidthBe As String,  _
                    ByVal Z2KerfWidthAct As Global.System.Nullable(Of Short),  _
                    ByVal Z2KerfWidthAf As String,  _
                    ByVal Z2CuttingPosBe As String,  _
                    ByVal Z2CuttingPosAct As Global.System.Nullable(Of Short),  _
                    ByVal Z2CuttingPosAf As String,  _
                    ByVal Z2ChippingBe As String,  _
                    ByVal Z2ChippingAct As Global.System.Nullable(Of Short),  _
                    ByVal Z2ChippingAf As String,  _
                    ByVal PKGBurrBe As String,  _
                    ByVal PKGBurrAf As String,  _
                    ByVal MeltPlateBe As String,  _
                    ByVal MeltPlateAf As String,  _
                    ByVal CrackChippingBe As String,  _
                    ByVal CrackChippingAf As String,  _
                    ByVal CutDepthBe As String,  _
                    ByVal CutDepthAf As String,  _
                    ByVal Z1BladeAmonthWear As Global.System.Nullable(Of Short),  _
                    ByVal Z2BladeAmonthWear As Global.System.Nullable(Of Short),  _
                    ByVal Z1BladeChange As String,  _
                    ByVal Z2BladeChange As String,  _
                    ByVal Z1BladeCarlibation As String,  _
                    ByVal Z2BladeCarlibation As String,  _
                    ByVal AlmNotFoundMacroTargQty As Global.System.Nullable(Of Short),  _
                    ByVal AlmNotFoundMicroTargQty As Global.System.Nullable(Of Short),  _
                    ByVal AlmLeastSqareApproxQty As Global.System.Nullable(Of Short),  _
                    ByVal AlmNonContSetupCheckQty As Global.System.Nullable(Of Short),  _
                    ByVal AlmNonContSetupReppErrQty As Global.System.Nullable(Of Short),  _
                    ByVal AlmBladeWearErrQty As Global.System.Nullable(Of Short),  _
                    ByVal AlmBladeExposLimitQty As Global.System.Nullable(Of Short),  _
                    ByVal AlmCutWaferFlowLowLimitQty As Global.System.Nullable(Of Short),  _
                    ByVal Andon As String,  _
                    ByVal GLCheck As String,  _
                    ByVal LotJudgement As String,  _
                    ByVal NetVersion As String,  _
                    ByVal OPJudgement As String,  _
                    ByVal Remark As String,  _
                    ByVal SelfConVersion As String,  _
                    ByVal LeadZingScratchAf As String,  _
                    ByVal LeadZingScratchBe As String,  _
                    ByVal Z1BladeLotNo As String,  _
                    ByVal Z1BladeType As String,  _
                    ByVal Z2BladeLotNo As String,  _
                    ByVal Z2BladeType As String,  _
                    ByVal ICOffQty As Global.System.Nullable(Of Integer),  _
                    ByVal MakerQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_MCNo As String,  _
                    ByVal Original_LotNo As String,  _
                    ByVal Original_LotStartTime As Date,  _
                    ByVal Original_LotEndTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_OPNo As String,  _
                    ByVal Original_InputQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TotalGood As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TotalNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_CutSpeed As String,  _
                    ByVal Original_TableCheck As String,  _
                    ByVal Original_Z1KerfWidthBe As String,  _
                    ByVal Original_Z1KerfWidthAct As Global.System.Nullable(Of Short),  _
                    ByVal Original_Z1KerfWidthAf As String,  _
                    ByVal Original_Z1CuttingPosBe As String,  _
                    ByVal Original_Z1CuttingPosAct As Global.System.Nullable(Of Short),  _
                    ByVal Original_Z1CuttingPosAf As String,  _
                    ByVal Original_Z1ChippingBe As String,  _
                    ByVal Original_Z1ChippingAct As Global.System.Nullable(Of Short),  _
                    ByVal Original_Z1ChippingAf As String,  _
                    ByVal Original_Z2KerfWidthBe As String,  _
                    ByVal Original_Z2KerfWidthAct As Global.System.Nullable(Of Short),  _
                    ByVal Original_Z2KerfWidthAf As String,  _
                    ByVal Original_Z2CuttingPosBe As String,  _
                    ByVal Original_Z2CuttingPosAct As Global.System.Nullable(Of Short),  _
                    ByVal Original_Z2CuttingPosAf As String,  _
                    ByVal Original_Z2ChippingBe As String,  _
                    ByVal Original_Z2ChippingAct As Global.System.Nullable(Of Short),  _
                    ByVal Original_Z2ChippingAf As String,  _
                    ByVal Original_PKGBurrBe As String,  _
                    ByVal Original_PKGBurrAf As String,  _
                    ByVal Original_MeltPlateBe As String,  _
                    ByVal Original_MeltPlateAf As String,  _
                    ByVal Original_CrackChippingBe As String,  _
                    ByVal Original_CrackChippingAf As String,  _
                    ByVal Original_CutDepthBe As String,  _
                    ByVal Original_CutDepthAf As String,  _
                    ByVal Original_Z1BladeAmonthWear As Global.System.Nullable(Of Short),  _
                    ByVal Original_Z2BladeAmonthWear As Global.System.Nullable(Of Short),  _
                    ByVal Original_Z1BladeChange As String,  _
                    ByVal Original_Z2BladeChange As String,  _
                    ByVal Original_Z1BladeCarlibation As String,  _
                    ByVal Original_Z2BladeCarlibation As String,  _
                    ByVal Original_AlmNotFoundMacroTargQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_AlmNotFoundMicroTargQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_AlmLeastSqareApproxQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_AlmNonContSetupCheckQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_AlmNonContSetupReppErrQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_AlmBladeWearErrQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_AlmBladeExposLimitQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_AlmCutWaferFlowLowLimitQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_Andon As String,  _
                    ByVal Original_GLCheck As String,  _
                    ByVal Original_LotJudgement As String,  _
                    ByVal Original_NetVersion As String,  _
                    ByVal Original_OPJudgement As String,  _
                    ByVal Original_Remark As String,  _
                    ByVal Original_SelfConVersion As String,  _
                    ByVal Original_LeadZingScratchAf As String,  _
                    ByVal Original_LeadZingScratchBe As String,  _
                    ByVal Original_Z1BladeLotNo As String,  _
                    ByVal Original_Z1BladeType As String,  _
                    ByVal Original_Z2BladeLotNo As String,  _
                    ByVal Original_Z2BladeType As String,  _
                    ByVal Original_ICOffQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_MakerQty As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(Original_MCNo, Original_LotNo, Original_LotStartTime, LotEndTime, OPNo, InputQty, TotalGood, TotalNG, CutSpeed, TableCheck, Z1KerfWidthBe, Z1KerfWidthAct, Z1KerfWidthAf, Z1CuttingPosBe, Z1CuttingPosAct, Z1CuttingPosAf, Z1ChippingBe, Z1ChippingAct, Z1ChippingAf, Z2KerfWidthBe, Z2KerfWidthAct, Z2KerfWidthAf, Z2CuttingPosBe, Z2CuttingPosAct, Z2CuttingPosAf, Z2ChippingBe, Z2ChippingAct, Z2ChippingAf, PKGBurrBe, PKGBurrAf, MeltPlateBe, MeltPlateAf, CrackChippingBe, CrackChippingAf, CutDepthBe, CutDepthAf, Z1BladeAmonthWear, Z2BladeAmonthWear, Z1BladeChange, Z2BladeChange, Z1BladeCarlibation, Z2BladeCarlibation, AlmNotFoundMacroTargQty, AlmNotFoundMicroTargQty, AlmLeastSqareApproxQty, AlmNonContSetupCheckQty, AlmNonContSetupReppErrQty, AlmBladeWearErrQty, AlmBladeExposLimitQty, AlmCutWaferFlowLowLimitQty, Andon, GLCheck, LotJudgement, NetVersion, OPJudgement, Remark, SelfConVersion, LeadZingScratchAf, LeadZingScratchBe, Z1BladeLotNo, Z1BladeType, Z2BladeLotNo, Z2BladeType, ICOffQty, MakerQty, Original_MCNo, Original_LotNo, Original_LotStartTime, Original_LotEndTime, Original_OPNo, Original_InputQty, Original_TotalGood, Original_TotalNG, Original_CutSpeed, Original_TableCheck, Original_Z1KerfWidthBe, Original_Z1KerfWidthAct, Original_Z1KerfWidthAf, Original_Z1CuttingPosBe, Original_Z1CuttingPosAct, Original_Z1CuttingPosAf, Original_Z1ChippingBe, Original_Z1ChippingAct, Original_Z1ChippingAf, Original_Z2KerfWidthBe, Original_Z2KerfWidthAct, Original_Z2KerfWidthAf, Original_Z2CuttingPosBe, Original_Z2CuttingPosAct, Original_Z2CuttingPosAf, Original_Z2ChippingBe, Original_Z2ChippingAct, Original_Z2ChippingAf, Original_PKGBurrBe, Original_PKGBurrAf, Original_MeltPlateBe, Original_MeltPlateAf, Original_CrackChippingBe, Original_CrackChippingAf, Original_CutDepthBe, Original_CutDepthAf, Original_Z1BladeAmonthWear, Original_Z2BladeAmonthWear, Original_Z1BladeChange, Original_Z2BladeChange, Original_Z1BladeCarlibation, Original_Z2BladeCarlibation, Original_AlmNotFoundMacroTargQty, Original_AlmNotFoundMicroTargQty, Original_AlmLeastSqareApproxQty, Original_AlmNonContSetupCheckQty, Original_AlmNonContSetupReppErrQty, Original_AlmBladeWearErrQty, Original_AlmBladeExposLimitQty, Original_AlmCutWaferFlowLowLimitQty, Original_Andon, Original_GLCheck, Original_LotJudgement, Original_NetVersion, Original_OPJudgement, Original_Remark, Original_SelfConVersion, Original_LeadZingScratchAf, Original_LeadZingScratchBe, Original_Z1BladeLotNo, Original_Z1BladeType, Original_Z2BladeLotNo, Original_Z2BladeType, Original_ICOffQty, Original_MakerQty)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MAPPKGMTDataTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MAPPKGMTData"
            tableMapping.ColumnMappings.Add("LotNo", "LotNo")
            tableMapping.ColumnMappings.Add("LotStartTime", "LotStartTime")
            tableMapping.ColumnMappings.Add("TotalGood", "TotalGood")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.MAP_Dicer.My.MySettings.Default.DBxConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT                      LotNo, LotStartTime, TotalGood"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM                 "& _ 
                "        MAPPKGMTData"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE                       (LotNo = @LotNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY    "& _ 
                "           LotStartTime DESC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotNo", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DBxDataSet.MAPPKGMTDataDataTable, ByVal LotNo As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (LotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LotNo")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(LotNo,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal LotNo As String) As DBxDataSet.MAPPKGMTDataDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (LotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LotNo")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(LotNo,String)
            End If
            Dim dataTable As DBxDataSet.MAPPKGMTDataDataTable = New DBxDataSet.MAPPKGMTDataDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _transactionDataTableAdapter As TransactionDataTableAdapter
        
        Private _mAPPKGDCDataTableAdapter As MAPPKGDCDataTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TransactionDataTableAdapter() As TransactionDataTableAdapter
            Get
                Return Me._transactionDataTableAdapter
            End Get
            Set
                Me._transactionDataTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property MAPPKGDCDataTableAdapter() As MAPPKGDCDataTableAdapter
            Get
                Return Me._mAPPKGDCDataTableAdapter
            End Get
            Set
                Me._mAPPKGDCDataTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._transactionDataTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._transactionDataTableAdapter.Connection) Is Nothing)) Then
                    Return Me._transactionDataTableAdapter.Connection
                End If
                If ((Not (Me._mAPPKGDCDataTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._mAPPKGDCDataTableAdapter.Connection) Is Nothing)) Then
                    Return Me._mAPPKGDCDataTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._transactionDataTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._mAPPKGDCDataTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DBxDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._transactionDataTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TransactionData.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._transactionDataTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._mAPPKGDCDataTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.MAPPKGDCData.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._mAPPKGDCDataTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DBxDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._transactionDataTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TransactionData.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._transactionDataTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._mAPPKGDCDataTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.MAPPKGDCData.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._mAPPKGDCDataTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DBxDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._mAPPKGDCDataTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.MAPPKGDCData.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._mAPPKGDCDataTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._transactionDataTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TransactionData.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._transactionDataTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DBxDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._transactionDataTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._transactionDataTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._mAPPKGDCDataTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._mAPPKGDCDataTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._transactionDataTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._transactionDataTableAdapter, Me._transactionDataTableAdapter.Connection)
                    Me._transactionDataTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._transactionDataTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._transactionDataTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._transactionDataTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._transactionDataTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._mAPPKGDCDataTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._mAPPKGDCDataTableAdapter, Me._mAPPKGDCDataTableAdapter.Connection)
                    Me._mAPPKGDCDataTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._mAPPKGDCDataTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._mAPPKGDCDataTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._mAPPKGDCDataTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._mAPPKGDCDataTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._transactionDataTableAdapter) Is Nothing) Then
                    Me._transactionDataTableAdapter.Connection = CType(revertConnections(Me._transactionDataTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._transactionDataTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._mAPPKGDCDataTableAdapter) Is Nothing) Then
                    Me._mAPPKGDCDataTableAdapter.Connection = CType(revertConnections(Me._mAPPKGDCDataTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._mAPPKGDCDataTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
